<?php
// $Id: project.install,v 1.17.2.4 2008/10/29 00:19:51 dww Exp $

function project_install() {
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      db_query("CREATE TABLE {project_projects} (
          nid int(10) unsigned NOT NULL default '0',
          uri varchar(50) NOT NULL default '',
          homepage varchar(255) NOT NULL default '',
          changelog varchar(255) NOT NULL default '',
          cvs varchar(255) NOT NULL default '',
          demo varchar(255) NOT NULL default '',
          documentation varchar(255) not null default '',
          screenshots varchar(255) not null default '',
          license varchar(255) not null default '',
          PRIMARY KEY (`nid`),
          KEY project_projects_uri (uri(8))
        ) /*!40100 DEFAULT CHARACTER SET utf8 */;");
      break;
    case 'pgsql':
      db_query("CREATE TABLE {project_projects} (
          nid int NOT NULL default '0',
          uri varchar(50) NOT NULL default '',
          homepage varchar(255) NOT NULL default '',
          changelog varchar(255) NOT NULL default '',
          cvs varchar(255) NOT NULL default '',
          demo varchar(255) NOT NULL default '',
          screenshots varchar(255) default '' not null,
          documentation varchar(255) default '' not null,
          license varchar(255) default '' not null,
          PRIMARY KEY (nid)
        );");
      break;
  }

  db_query("UPDATE {system} SET weight = 2 WHERE name = 'project'");
}

/**
 * Implementation of hook_uninstall().
 */
function project_uninstall() {
  if (db_table_exists('project_projects')) {
    db_query("DROP TABLE {project_projects}");
  }

  $variables = array(
    'project_browse_nodes',
    'project_sort_method',
    'project_vocabulary',
    'project_search_block_help_text',
  );
  foreach ($variables as $variable) {
    variable_del($variable);
  }

  $variables = db_query("SELECT name FROM {variable} WHERE name LIKE 'project_sort_method_used_%%'");
  while ($variable = db_fetch_object($variables)) {
    variable_del($variable->name);
  }
}

function project_update_1() {
  return _system_update_utf8(array('project_projects', 'project_releases', 'project_issues', 'project_comments', 'project_subscriptions', 'project_issue_state'));
}

function project_update_2() {
  $ret = array();
  $ret[] = update_sql("UPDATE {system} SET weight = 2 WHERE name = 'project'");
  return $ret;
}

/**
 * Remove stale records from tables that weren't cleaned up properly
 * when project nodes were deleted.  See http://drupal.org/node/67877
 */
function project_update_3() {
  $ret = array();
  $can_use_subselect = TRUE;
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      if (version_compare(mysql_get_server_info(), '4.1.0', '<')) {
        $can_use_subselect = FALSE;
      }
      break;
  }

  $tables = array(
    "{project_releases}",
    "{project_comments}",
    "{project_subscriptions}",
  );

  foreach ($tables as $table) {
    $res = array();
    if ($can_use_subselect) {
      $res = update_sql("DELETE FROM $table WHERE nid NOT IN (SELECT nid FROM {node})");
      $ret[] = $res;
    }
    else {
      $result = db_query("SELECT p.nid FROM $table p LEFT JOIN {node} n ON p.nid = n.nid WHERE n.nid IS NULL");
      $nids = array();
      while ($nid = db_fetch_object($result)) {
        $nids[] = $nid->nid;
      }
      if (!empty($nids)) {
        $res = update_sql("DELETE FROM $table WHERE nid IN (" . implode(',', $nids) . ')');
        $ret[] = $res;
      }
    }
    if ($res['success']) {
       $num = db_affected_rows();
       $ret[] = array('success' => TRUE, 'query' => check_plain("$num rows deleted from $table"));
    }
  }
  return $ret;
}

function project_update_4() {
  $ret = array();

  // PostgreSQL needs CREATE TABLE foobar _AS_ SELECT ...
  $AS = ($GLOBALS['db_type'] == 'pgsql') ? 'AS' : '';

  // Create temporary table to build the new {project_projects} and
  // {project_issue_projects} tables from.
  $ret[] = update_sql("CREATE TABLE {project_projects_tmp} $AS SELECT * FROM {project_projects}");

  if (db_table_exists('project_issue_projects')) {
    $ret[] = update_sql("DROP TABLE {project_issue_projects}");
  }
  $ret[] = update_sql("DROP TABLE {project_projects}");

  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $ret[] = update_sql("CREATE TABLE {project_projects} (
          nid int(10) unsigned NOT NULL default '0',
          uri varchar(50) NOT NULL default '',
          homepage varchar(255) NOT NULL default '',
          changelog varchar(255) NOT NULL default '',
          cvs varchar(255) NOT NULL default '',
          demo varchar(255) NOT NULL default '',
          release_directory varchar(255) NOT NULL default '',
          version int(10) unsigned NOT NULL default '0',
          mail varchar(255) NOT NULL default '',
          documentation varchar(255) not null default '',
          screenshots varchar(255) not null default '',
          license varchar(255) not null default '',
          PRIMARY KEY (`nid`),
          KEY project_projects_uri (uri(8))
        ) /*!40100 DEFAULT CHARACTER SET utf8 */;");
      $ret[] = update_sql("CREATE TABLE {project_issue_projects} (
          nid int(10) unsigned NOT NULL default '0',
          issues tinyint(4) NOT NULL default '0',
          components text,
          help text,
          mail_digest varchar(255) NOT NULL default '',
          mail_copy varchar(255) NOT NULL default '',
          mail_copy_filter varchar(255) NOT NULL default '',
          mail_copy_filter_state varchar(255) NOT NULL default '',
          mail_reminder tinyint(4) NOT NULL default '0',
          PRIMARY KEY (nid)
        ) /*!40100 DEFAULT CHARACTER SET utf8 */;");
      break;
    case 'pgsql':
      $ret[] = update_sql("CREATE TABLE {project_projects} (
          nid int NOT NULL default '0',
          uri varchar(50) NOT NULL default '',
          homepage varchar(255) NOT NULL default '',
          changelog varchar(255) NOT NULL default '',
          cvs varchar(255) NOT NULL default '',
          demo varchar(255) NOT NULL default '',
          release_directory varchar(255) NOT NULL default '',
          version int NOT NULL default '0',
          mail varchar(255) not null default '',
          screenshots varchar(255) default '' not null,
          documentation varchar(255) default '' not null,
          license varchar(255) default '' not null,
          PRIMARY KEY (nid)
        );");
      $ret[] = update_sql("CREATE TABLE {project_issue_projects} (
          nid int NOT NULL default '0',
          issues smallint NOT NULL default '0',
          components text,
          help text,
          mail_digest varchar(255) not null default '',
          mail_copy varchar(255) not null default '',
          mail_copy_filter varchar(255) not null default '',
          mail_copy_filter_state varchar(255) default '' not null,
          mail_reminder smallint NOT NULL default '0',
          PRIMARY KEY (nid)
        );");
      break;
  }

  $ret[] = update_sql("INSERT INTO {project_projects} SELECT DISTINCT nid, uri, homepage, changelog, cvs, demo, release_directory, version, mail, documentation, screenshots, license FROM {project_projects_tmp}");
  $ret[] = update_sql("INSERT INTO {project_issue_projects} SELECT DISTINCT nid, issues, components, help, mail_digest, mail_copy, mail_copy_filter, mail_copy_filter_state, mail_reminder FROM {project_projects_tmp}");

  $ret[] = update_sql("DROP TABLE {project_projects_tmp}");

  foreach (array('reply_to', 'digest_last', 'digest_interval', 'reminder_last', 'reminder_interval') as $varname) {
    $val = variable_get("project_$varname", NULL);
    if (isset($val)) {
      variable_set("project_issue_$varname", $val);
      $ret[] = update_sql("DELETE FROM {variable} WHERE name = 'project_" . $varname . "'");
    }
  }

  return $ret;
}

/**
 * 5.x specific updates.
 */

/**
 * Remove a stale variable setting.
 */
function project_update_5000() {
  variable_del('project_support_forum');
  return array();
}

/**
 * Get rid of the per-project mail address (used only for the issue
 * email From: header) which has numerous problems.
 * See http://drupal.org/node/36619 and http://drupal.org/node/189210
 */
function project_update_5001() {
  $ret = array();
  // PgSQL and MySQL have the same syntax for this.
  $ret[] = update_sql('ALTER TABLE {project_projects} DROP COLUMN mail');
  return $ret;
}

/**
 * Get rid of the 'version' column in the {project_projects} table.
 * See http://drupal.org/node/231392
 */
function project_update_5002() {
  $ret = array();
  // PgSQL and MySQL have the same syntax for this.
  $ret[] = update_sql('ALTER TABLE {project_projects} DROP COLUMN version');
  return $ret;
}

/**
 * Get rid of the 'release_directory' column in the {project_projects} table.
 * See http://drupal.org/node/231558
 */
function project_update_5003() {
  $ret = array();
  // PgSQL and MySQL have the same syntax for this.
  $ret[] = update_sql('ALTER TABLE {project_projects} DROP COLUMN release_directory');
  return $ret;
}

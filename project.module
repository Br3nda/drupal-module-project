<?php
// $Id: project.module,v 1.123 2003/11/17 15:01:40 kjartan Exp $

// project nodes    -> project_projects
// project releases -> project_releases

// issue nodes      -> project_issues
// issue comments   -> project_comments

require_once 'project.inc';
require_once 'release.inc';
require_once 'issue.inc';
require_once 'comment.inc';
require_once 'mail.inc';

function project_help($section = 'admin/path/help') {
  switch ($section) {
    case 'admin/system/modules':
      return t('Enables teams to track outstanding items which need resolution.');
  }
}

function project_system($field) {
  $info = array(
    'description' => project_help('admin/system/modules')
  );
  return $info[$field];
}

function project_node($field) {
  $info['name'] = t('project');

  return $info[$field];
}

function project_head() {
  $style = "<style type=\"text/css\">\n@import url(modules/project/project.css);\n</style>";
  return $style;
}

function project_perm() {
  return array(
    'administer projects',
    'maintain projects',
    'access projects',
    'maintain project issues',
    'access project issues'
  );
}

function project_settings() {
  $output = form_textfield(t('Release directory'), 'project_release_directory', variable_get('project_release_directory', ''), 50, 255, t('Leave this blank if project maintainers are to create their own release packages. This is useful if releases are generated by an external tool.'));
  if (module_exist('mailhandler')) {
    // TODO: move this stuff to mailhandler.module ?
    $items = array(t('<none>'));
    $result = db_query('SELECT mail FROM {mailhandler} ORDER BY mail');
    while ($mail = db_result($result, $i++)) {
      $items[$mail] = $mail;
    }

    $output .= form_select(t('Reply-to address on e-mail notifications'), 'project_reply_to', variable_get('project_reply_to', ''), $items);
  }
  $header = array_merge(array(t('type')), array_keys(node_invoke_nodeapi($node, 'settings')));
  foreach (array('project_issue', 'project_project') as $name) {
    $node->type = $name;
    $cols = array();
    foreach (node_invoke_nodeapi($node, 'settings') as $setting) {
      $cols[] = array('data' => $setting, 'align' => 'center', 'width' => 55);
    }
    $rows[] = array_merge(array(module_invoke($name, 'node', 'name')), $cols);
  }

  $output .= form_item(t('Settings'), theme('table', $header, $rows));
  return $output;
}

function project_cron() {
  if (variable_get('project_release_directory', '') && time() - variable_get('project_release_directory_last', 0) > variable_get('project_release_directory_interval', 24 * 60 * 60)) {
    variable_set('project_release_directory_last', time());
    project_release_cron();
  }

  if (time() - variable_get('project_digest_last', 0) > variable_get('project_digest_interval', 7 * 24 * 60 * 60)) {
    variable_set('project_digest_last', time());
    project_mail_digest();
  }

  if (time() - variable_get('project_reminder_last', 0) > variable_get('project_reminder_interval', 28 * 7 * 24 * 60 * 60)) {
    variable_set('project_reminder_last', time());
    project_mail_reminder();
  }

  $result = db_query('SELECT * FROM {project_issues} p LEFT JOIN {node} n USING (nid) WHERE p.state = 2 AND n.changed < %d', time() - 14 * 24 * 60 * 60);
  while ($node = db_fetch_object($result)) {
    foreach (array('nid', 'pid', 'category', 'component', 'priority', 'assigned', 'state', 'title') as $var) {
      $comment->$var = $node->$var;
    }
    $comment->state = 7;
    project_comment_save($comment);
  }
}

function project_link($type, $node = 0, $main = 0) {
  $links = array();
  switch ($type) {
    case 'page':
      if (user_access('access projects')) {
        $links[] = l(t('projects'), 'project', array('title' => t('View all projects.')));
      }
      break;
    case 'node':
      if ($node->type == 'project_project') {
        if (!user_access('administer nodes') && node_access('update', $node)) {
          $links[] = l(t('edit'), "node/edit/$node->nid");
        }
        if (node_access($node, 'update')) {
          $links = array(l(t('add new release'), "project/$node->uri/releases/add"));
        }
        if ($node->issues && user_access('access project issues')) {
          $categories = project_issue_category();
          foreach ($categories as $category => $name) {
            $links[] = l($name, "project/$node->uri/issues?categories=$category");
          }
        }
        foreach (array('homepage' => t('homepage'), 'changelog' => t('changelog'), 'cvs' => t('cvs tree'), 'demo' => t('demo site')) as $uri => $name) {
          if (!empty($node->$uri)) {
            $links[] = sprintf('<a href="%s">%s</a>', $node->$uri, $name);
          }
        }
      }
      if ($node->type == 'project_issue') {
        if (user_access('maintain project issues')) {
          $project = node_load(array('nid' => $node->pid, 'type' => 'project_project'));
          $links[] = l(t('update issue'), "project/comments/add/$node->nid");
          if ($node->fid) {
            $links[] = l(t('download attachment'), "project/$project->uri/issues/download/$node->nid");
          }
        }
      }
      break;
    case 'system':
      if (arg(0) == 'project' && user_access('access projects')) {
        menu('project', t('projects'), 'page', 1);
        menu('project/releases', t('releases'), 'page', 0);
        $result = db_query_range("SELECT version FROM {project_releases} WHERE status = 1 AND path <> '' GROUP BY version ORDER BY created DESC", 0, 5);
        while ($version = db_fetch_object($result)) {
          menu("project/releases/$version->version", $version->version, 'page', 0);
        }
      }

      if (user_access('maintain projects')) {
        menu('node/add/project_project', t('project'), 'page');
      }

      if (user_access('access project issues')) {
        $categories = project_issue_category(0, 1);

        // Figure out active project if possible.
        if (arg(0) == 'project' && arg(1)) {
          $project = node_load(array('nid' => db_result(db_query("SELECT nid FROM {project_projects} WHERE uri = '%s'", arg(1)), 0)));
        }
        elseif (arg(0) == 'node' && is_numeric(arg(2))) {
          $project = node_load(array('nid' => arg(2), 'type' => 'project_project'));
        }

        // If we have a project make some specific menu items for easy navigation.
        if ($project) {
          $uri = "project/$project->uri";
          menu("$uri/issues", "$project->title issues", 'page', 1);
          menu("$uri/issues/search", t('search'), 'page', 1);
          if ($GLOBALS['user']->uid) {
            menu("$uri/issues/user", t('my issues'), 'page', 0);
            menu("$uri/issues/subscribe", t('subscribe'), 'page', 3);
          }
          foreach ($categories as $cat => $category) {
            menu("$uri/issues/$cat", $category, 'page', 2);
          }
          menu("$uri/issues/add", t('submit'), 'page', 3);
          menu("$uri/issues/statistics", t('statistics'), 'page', 4);
        }

        // Create all project issues menu.
        menu('project/issues', t('issues'), 'page', 2);
        if ($GLOBALS['user']->uid) {
          menu('project/issues/user', t('my issues'), 'page', 0);
        }
        menu('project/issues/search', t('search'), 'page', 1);
        foreach ($categories as $cat => $category) {
          menu("project/issues/$cat", $category, 'page', 2);
        }
        menu('project/issues/add', t('submit'), 'page', 3);
        menu("project/issues/statistics", t('statistics'), 'page', 4);
      }

      // Populate the node/add menu
      if (user_access('maintain project issues')) {
        $categories = project_issue_category(0, 0);
        foreach ($categories as $cat => $category) {
          menu("node/add/project_issue/$cat", $category, 'page', 1);
        }
      }
      break;
  }

  return $links;
}

function project_nodeapi(&$node, $op, $arg = 0) {
  if ($op == 'form post' && $node->type == 'project_issue' && $node->pid) {
    return form_item(t('Posting PHP code'), t('Wrap your PHP code inside <code>[?php ?]</code> tags and it will be colorised automatically.'));
  }
}

function project_filter_highlight($text) {
  $text = trim(stripslashes($text));
  return '<div class="php">'. highlight_string("<?php\n$text\n?>", 1) .'</div>';
}

function project_filter($text) {
  $text = preg_replace('@\[(\?(php)?|%)(.+?)(\?|%)\]@se', "project_filter_highlight('$3')", $text);
  return $text;
}

function project_page() {
  global $user;

  if (!user_access('access projects')) {
    drupal_goto(url());
  }

  if ($_POST['op'] == t('Subscribe') && $_POST['edit']['nid']) {
    global $user;
    db_query('DELETE FROM {project_subscriptions} WHERE nid = %d AND uid = %d', $_POST['edit']['nid'], $user->uid);
    db_query('INSERT INTO {project_subscriptions} (nid, uid, level) VALUES (%d, %d, %d)', $_POST['edit']['nid'], $user->uid, $_POST['edit']['level']);
    drupal_goto(url('node/view/'. $_POST['edit']['nid']));
  }
  switch (arg(1)) {
    case 'releases':
      $breadcrumb[] = l(t('Home'), NULL);
      $breadcrumb[] = l(t('Projects'), 'project');

      print theme('header');
      print theme('breadcrumb', $breadcrumb);
      print theme('box', t('Project downloads'), project_release_overview());
      print theme('footer');
      break;
    case 'issues':
      project_issue_page($node);
      break;
    case 'comments':
      if (user_access('access project issues')) {
        project_comment_page($node);
        break;
      }
    default:
      if (arg(1)) {
        if (is_numeric(arg(1))) {
          $node = node_load(array('nid' => arg(1), 'type' => 'project_project'));
        }
        else {
          $node = node_load(array('nid' => db_result(db_query("SELECT nid FROM {project_projects} WHERE uri = '%s'", arg(1)), 0), 'type' => 'project_project'));
        }
        if ($node->nid) { // Show project details
          switch (arg(2)) {
            case 'releases':
              project_release_page($node);
              break;
            case 'issues':
              if ($node->issues && user_access('access project issues')) {
                project_issue_page($node);
                break;
              }
            default:
              print theme('header', $node->title);
              node_view($node);
              print theme('footer');
          }
        }
      }
      else { // Show project overview
        project_page_overview();
      }
  }
}

function project_page_overview() {
  if (!is_numeric($_GET['tid']) && function_exists('taxonomy_get_vocabularies') && count($vocabularies = taxonomy_get_vocabularies('project'))) { // Show an overview of vocabularies
    $vocabulary = reset($vocabularies);

    $terms = taxonomy_get_tree($vocabulary->vid);
    foreach ($terms as $term) {
      $count = taxonomy_term_count_nodes($term->tid);
      $browse[] = l($term->name, 'project', NULL, "tid=$term->tid") ." ($count)";
      $items = array();
      $result = db_query("SELECT n.nid, title FROM {node} n INNER JOIN {term_node} r ON n.nid = r.nid WHERE n.type = 'project_project' AND r.tid = %d AND n.status = 1 ORDER BY title", $term->tid);
      while ($node = db_fetch_object($result)) {
        $items[] = l($node->title, "node/view/$node->nid");
      }
      $output .= theme('item_list', $items, $term->name);
    }

    /*if (variable_get('project_release_directory', '')) {
      $browse = array(l(t('All projects'), 'project', NULL, 'tid=0'));
      $browse[] = l(t('All downloads'), 'project/releases');
    }*/

    print theme('header', t('Projects'));

    print '<div style="float: left; padding-right: 5em;">';
    print theme('box', NULL, $output);
    print '</div>';

    print theme('box', NULL, theme('item_list', $browse, t('Details')));

    print theme('footer');
  }
  else {
    if (is_numeric($_GET['tid']) && $_GET['tid']) {
      $term = taxonomy_get_term($_GET['tid']);
    }

    $breadcrumb[] = l(t('Home'), NULL);
    $breadcrumb[] = l(t('Projects'), 'project');
    if ($term) {
      $breadcrumb[] = $term->name;
    }

    print theme('header', t('Projects'));
    print theme('breadcrumb', $breadcrumb);
    if ($term) { // Paged full view
      $result = pager_query("SELECT DISTINCT(n.nid) FROM {node} n INNER JOIN {term_node} r ON n.nid = r.nid WHERE n.type = 'project_project' AND r.tid =". check_query($_GET[tid]) .' AND n.status = 1 ORDER BY title', variable_get('project_overview', 10));
      while ($node = db_fetch_object($result)) {
        node_view(node_load($node), 1);
      }
      if ($pager = pager_display(NULL, variable_get('project_overview', 10), 0, 'default', array('tid' => $_GET['tid']))) {
        print $pager;
      }
    }
    else { // Show table form
      $header = array(
        array('data' => t('project'), 'field' => 'n.title', 'sort' => 'asc'),
        array('data' => t('updated'), 'field' => 'n.changed'),
        array('data' => t('issues'), 'colspan' => 4, 'field' => 'count')
      );
      $result = db_query("SELECT n.nid, n.title, n.changed, COUNT(p.nid) AS count FROM {node} n LEFT JOIN {project_issues} p ON n.nid = p.pid AND p.state < 3 WHERE n.type = 'project_project' AND n.status = 1 GROUP BY n.nid %s", tablesort_sql($header));
      while ($node = db_fetch_object($result)) {
        $rows[] = array(
          l($node->title, "node/view/$node->nid"),
          array('data' => project_interval(time() - $node->changed, 2), 'align' => 'right'),
          array('data' => "$node->count open", 'align' => 'right'),
          l(t('view'), "project/$node->nid/issues"),
          l(t('search'), "project/$node->nid/issues/search"),
          l(t('submit'), 'node/add/project_issue', NULL, "project=$node->nid")
        );
      }

      $output = '<div class="project">';
      $output .= theme('table', $header, $rows);
      $output .= '</div>';
      print theme('box', t('All projects'), $output);
    }

    print theme('footer');
  }
}

function project_page_user() {
  global $user;

  switch ($_POST['op'] ? $_POST['op'] : arg(2)) {
    case t('Save'):
      foreach ($_POST['edit'] as $nid => $settings) {
        if (($project = node_load(array('nid' => $nid, 'type' => 'project_project')))) {
          db_query('DELETE FROM {project_subscriptions} WHERE nid = %d AND uid = %d', $nid, $user->uid);
          db_query('INSERT INTO {project_subscriptions} (nid, uid, level) VALUES (%d, %d, %d)', $nid, $user->uid, $settings['subscription']);
        }
        $status = status(t('Settings saved'));
      }
    case 'settings':
      $header = array(t('project'), t('issues notification'));
      $result = db_query('SELECT * FROM {project_subscriptions} WHERE uid = %d', $user->uid);
      while ($subscription = db_fetch_object($result)) {
        $subscriptions[$subscription->nid] = $subscription->level;
      }

      $result = db_query("SELECT nid, title FROM {node} WHERE status = 1 AND type = 'project_project' ORDER BY title");
      while ($project = db_fetch_object($result)) {
        $rows[] = array(
          $project->title,
          form_select('', "$project->nid][subscription", $subscriptions[$project->nid], array(0 => t("Don't notify when issues are submitted."), 1 =>t('Only notify on my submitted issues.'), 2 => t('Notify me of all issues that are submitted.')))
        );
      }

      $output = theme('table', $header, $rows);
      $output .= form_submit(t('Save'));

      print theme('header', t('User project settings'));
      print $status;
      print theme('box', t('User project settings'), form($output));
      print theme('footer');
      break;
    default:
      $_POST['edit']= array('users' => $user->uid);
      $output = project_issue_query_result();

      print theme('header');
      print theme('box', l(t('Your issues'), 'project/user/issues'), $output);
      print theme('footer');
  }
}

function project_search($keys) {
  $find = do_search(array(
    'keys' => $keys,
    'type' => 'node',
    'select' => "SELECT s.lno AS lno, n.title AS title, n.created AS created, u.uid AS uid, u.name AS name, s.count AS count FROM search_index s, node n LEFT JOIN users u ON n.uid = u.uid WHERE s.lno = n.nid AND s.type = 'project' AND n.status = 1 AND s.word like '%'")
  );

  return $find;
}

function project_update_index() {
  return array(
    'last_update' => 'project_cron_index',
    'node_type' => 'node',
    'select' => 'SELECT nid as lno, body as text1 FROM {project_comments} WHERE created > ' . variable_get('project_cron_index', 1) . ' OR changed > ' . variable_get('project_cron_index', 1)
  );
}

// Special project stuff
function project_types() {
  return array('project_project', 'project_issue');
}

function project_invoke(&$node, $function, $arg1 = 1, $arg2 = 0) {
  if (in_array($node->type, project_types())) {
    $function = 'project_'. $node->type .'_'. $function;
    return $function($node, $arg1, $arg2);
  }
}

// Node functions
/*function project_node($field) {
  global $user;

  $info['name'] = t('project');
  $info['description'] = t('All and everything related to creating and maintaining projects.');

  return $info[$field];
}*/

function project_form(&$node, &$help, &$error, &$param) {
  // TODO: add type selector
  switch ($node->type) {
    case 'project_project':
      $node->type = 'project_project';
      return project_project_form($node, $help, $error, $param);
    default:
      $node->type = 'project_issue';
      return project_issue_form($node, $help, $error, $param);
  }
}

function project_validate(&$node) {
  if (!in_array($node->type, project_types())) {
    return $error['type'] = t('System error: invalid project type.');
  }
  return project_invoke($node, 'validate');
}

function project_view($node, $main = 0) {
  return project_invoke($node, 'view', $main);
}

function project_load($node) {
  return project_invoke($node, 'load');
}

function project_insert($node) {
  return project_invoke($node, 'insert');
}

function project_update($node) {
  return project_invoke($node, 'update');
}

function project_delete($node) {
  return project_invoke($node, 'delete');
}

function project_access($op, $node) {
  switch ($node->type) {
    case 'project_project':
      return project_project_access($op, $node);
    case 'project_issue':
      return project_issue_access($op, $node);
  }
}

function project_interval($timestamp, $max = 0) {
  $units = array('1 year|%count years' => 31536000, '1 week|%count weeks' => 604800, '1 day|%count days' => 86400, '1 hour|%count hours' => 3600, '1 min|%count min' => 60, '1 sec|%count sec' => 1);
  foreach ($units as $key => $value) {
    $key = explode('|', $key);
    if ($timestamp >= $value) {
      $output .= ($output ? ' ' : '') . format_plural(floor($timestamp / $value), $key[0], $key[1]);
      $timestamp %= $value;
      if (++$level == $max) {
        break;
      }
    }
  }
  return ($output) ? $output : t('0 sec');
}

?>

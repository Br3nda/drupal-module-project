<?php
// $Id: project.module,v 1.178 2005/01/30 18:31:13 unconed Exp $

// project nodes    -> project_projects
// project releases -> project_releases

// issue nodes      -> project_issues
// issue comments   -> project_comments

if (file_exists('modules/project/project.inc')) {
  require_once 'modules/project/project.inc';
  require_once 'modules/project/release.inc';
  require_once 'modules/project/issue.inc';
  require_once 'modules/project/comment.inc';
  require_once 'modules/project/mail.inc';
}

function project_help($section) {
  switch ($section) {
    case 'admin/system/modules#description':
      return t('Enables teams to track outstanding items which need resolution.');
    case 'admin/help#project':
      $help = '<h3>Mailhandler support</h3>'.
              '<p>Basic mail format:</p>'.
              '<pre>'.
              "Type: project\n".
              "Project: chatbox\n".
              "Category: bug report\n".
              "Version: cvs\n".
              "Priority: normal\n".
              "Status: active\n".
              "Component: code\n\n".
              "Whatever I type here will be the body of the node.\n".
              '</pre>'.
              "<p>See the mailhandler help for more information on using the mailhandler module.</p>\n";
      return $help;
    case 'node/add#project_project':
      return t('A project enables teams to track outstanding items which need resolution');
    case 'node/add#project_issue':
      return t('Add a new issue (bug report, feature request, etc) to an existing project.');
    case 'node/add/project_project':
      return variable_get('project_help_node_add', '');
  }
}

function project_node_name($field) {
  return t('project');
}

function project_node_types($field) {
  return array('project_project', 'project_issue');
}

function project_perm() {
  return array(
    'administer projects',
    'maintain projects',
    'access projects',
    'create project issues',
    'access project issues'
  );
}

function project_settings() {
  if (!file_check_directory(file_create_path(variable_get('project_directory_issues', 'issues')))) {
    $error['project_directory_issues'] = theme('error', t('Directory does not exist, or is not writable.'));
  }

  $versions = array(-1 => t('all')) + project_releases_list();

  $output = form_textfield(t('Release directory'), 'project_release_directory', variable_get('project_release_directory', ''), 50, 255, t('Leave this blank if project maintainers are to create their own release packages. This is useful if releases are generated by an external tool.'));
  $output .= form_radios(t('Unmoderate projects with releases'), 'project_release_unmoderate', variable_get('project_release_unmoderate', 0), array('Disabled', 'Enabled'));
  $output .= form_radios(t('Default release overview'), 'project_release_overview', variable_get('project_release_overview', -1), $versions, t('Default release version to list on the overview page'));
  $output .= form_textfield(t('Issue directory'), 'project_directory_issues', variable_get('project_directory_issues', 'issues'), 30, 255, t("Subdirectory in the directory '%dir' where attachment to issues will be stored.", array('%dir' => variable_get('file_directory_path', 'files') .'/')));

  if (module_exist('mailhandler')) {
    // TODO: move this stuff to mailhandler.module ?
    $items = array(t('<none>'));
    $result = db_query('SELECT mail FROM {mailhandler} ORDER BY mail');
    while ($mail = db_result($result, $i++)) {
      $items[$mail] = $mail;
    }

    $output .= form_select(t('Reply-to address on e-mail notifications'), 'project_reply_to', variable_get('project_reply_to', ''), $items);
  }

  return $output;
}

function project_cron() {
  if (variable_get('project_release_directory', '') && time() - variable_get('project_release_directory_last', 0) > variable_get('project_release_directory_interval', 6 * 60 * 60)) {
    variable_set('project_release_directory_last', time());
    project_release_cron();
  }

  if (time() - variable_get('project_digest_last', 0) > variable_get('project_digest_interval', 7 * 24 * 60 * 60)) {
    variable_set('project_digest_last', time());
    project_mail_digest();
  }

  if (time() - variable_get('project_reminder_last', 0) > variable_get('project_reminder_interval', 28 * 7 * 24 * 60 * 60)) {
    variable_set('project_reminder_last', time());
    project_mail_reminder();
  }

  $result = db_query('SELECT DISTINCT(n.nid), p.pid, p.category, p.component, p.priority, p.assigned, p.state, n.title FROM {project_issues} p INNER JOIN {node} n USING(nid) '. node_access_join_sql() .' WHERE n.status = 1 AND '. node_access_where_sql() .' AND p.state = 2 AND n.changed < %d', time() - 14 * 24 * 60 * 60);
  while ($node = db_fetch_object($result)) {
    foreach (array('nid', 'pid', 'category', 'component', 'priority', 'assigned', 'state', 'title') as $var) {
      $comment->$var = $node->$var;
    }
    $comment->state = 7;
    project_comment_save($comment);
  }
}

function project_link($type, $node = 0, $main = 0) {
  $links = array();

  switch ($type) {
    case 'page':
      if (user_access('access projects')) {
        $links[] = l(t('projects'), 'project', array('title' => t('View all projects.')));
      }
      break;
    case 'node':
      if ($node->type == 'project_issue') {
        if (user_access('create project issues')) {
          $project = node_load(array('nid' => $node->pid, 'type' => 'project_project'));
          $links[] = l(t('follow up'), "project/comments/add/$node->nid");
        }
      }
      break;
  }

  return $links;
}

function project_menu($may_cache) {
  $items = array();

  drupal_set_html_head('<style type="text/css">@import url('. $GLOBALS[base_url] .'/modules/project/project.css);</style>');

  if ($may_cache) {
    // User pages:
    $access = user_access('access projects');

    $items[] = array('path' => 'project', 'title' => t('projects'), 'callback' => 'project_page_overview', 'access' => $access, 'type' => MENU_NORMAL_ITEM);

    if ($vocabulary = current(taxonomy_get_vocabularies('project_project'))) {
      $terms = taxonomy_get_tree($vocabulary->vid);

      foreach ($terms as $i => $term) {
        $items[] = array('path' => 'project/'. $term->name, 'title' => $term->name, 'callback' => 'project_page_overview', 'access' => $access, 'type' => $i == 0 ? MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK, 'weight' => $term->weight);
      }
    }
  
    $items[] = array('path' => 'project/releases', 'title' => t('releases'), 'callback' => 'project_release_page', 'access' => $access, 'type' => MENU_NORMAL_ITEM);
    $items[] = array('path' => 'project/user', 'title' => t('my projects'), 'callback' => 'project_page_user', 'access' => $access, 'type' => MENU_NORMAL_ITEM);

    foreach (project_releases_list() as $v => $version) {
      $items[] = array('path' => "project/releases/$v", 'title' => $version, 'callback' => 'project_release_page', 'access' => $access, 'type' => ($v == variable_get('project_release_overview', -1) ? MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK), 'weight' => $i++);
    }

    // Create projects
    $access = user_access('maintain projects');
    $items[] = array('path' => 'node/add/project_project', 'title' => t('project'), 'callback' => 'node_page', 'access' => $access, 'type' => MENU_NORMAL_ITEM);

    // Issues
    $access = user_access('access project issues');
    $items[] = array('path' => 'project/issues', 'title' => t('issues'), 'callback' => 'project_issue_page', 'access' => $access, 'type' => MENU_NORMAL_ITEM);
    $items[] = array('path' => 'project/issues/user', 'title' => t('issues'), 'callback' => 'project_issue_page', 'access' => $GLOBALS['user']->uid && $access, 'type' => MENU_NORMAL_ITEM);
    $items[] = array('path' => 'project/issues/subscribe', 'title' => t('subscribe'), 'callback' => 'project_issue_page', 'access' => $GLOBALS['user']->uid && $access, 'type' => MENU_NORMAL_ITEM);
    $items[] = array('path' => 'project/issues/add', 'title' => t('submit'), 'callback' => 'project_issue_page', 'access' => $access, 'type' => MENU_NORMAL_ITEM);
    $items[] = array('path' => 'project/issues/statistics', 'title' => t('statistics'), 'callback' => 'project_issue_page', 'access' => $access, 'type' => MENU_NORMAL_ITEM);
    $items[] = array('path' => 'project/issues/search', 'title' => t('search'), 'callback' => 'project_issue_page', 'access' => $access, 'type' => MENU_NORMAL_ITEM);

    // Create issues
    $access = user_access('create project issues');
    $items[] = array('path' => 'node/add/project_issue', 'title' => t('issue'), 'callback' => 'node_page', 'access' => $access, 'type' => MENU_NORMAL_ITEM, 'weight' => 1);


    // Comments
    $items[] = array('path' => 'project/comments', 'title' => t('comments'), 'callback' => 'project_comment_page', 'access' => $access, 'type' => MENU_CALLBACK);

    // Releases
    if (variable_get('project_release_directory', '')) {
      $access = user_access('administer projects');
      $items[] = array('path' => 'admin/settings/project/reload', 'title' => t('scan for releases'), 'callback' => 'project_release_scan', 'access' => $access, 'type' => MENU_NORMAL_ITEM);
    }
  }
  else {
    if (arg(0) == 'node' && is_numeric(arg(1))) {
      $node = node_load(array('nid' => arg(1)));
      if ($node->type == 'project_project') {
        $items[] = array('path' => 'node/'. arg(1) .'/release', 'title' => t('releases'), 'callback' => 'project_project_releases', 'access' => node_access('view', $node), 'weight' => 0, 'type' => MENU_CALLBACK);

        if (node_access('update', $node)) {
          $items[] = array('path' => 'node/'. arg(1) .'/release/overview', 'title' => t('overview'), 'callback' => 'project_project_releases', 'access' => node_access('view', $node), 'weight' => 0, 'type' => MENU_CALLBACK);
        }

        if (!variable_get('project_release_directory', '')) {
          $items[] = array('path' => 'node/'. arg(1) .'/release/add', 'title' => t('add'), 'callback' => 'project_release_submit', 'access' => node_access('update', $node), 'weight' => 1, 'type' => MENU_CALLBACK);
        }
        if (arg(2) == 'release' && is_numeric(arg(4))) {
          $items[] = array('path' => 'node/'. arg(1) .'/release/edit/'. arg(4), 'title' => t('edit'), 'callback' => 'project_release_submit', 'access' => node_access('update', $node), 'weight' => 1, 'type' => MENU_CALLBACK);
          $items[] = array('path' => 'node/'. arg(1) .'/release/delete/'. arg(4), 'title' => t('edit'), 'callback' => 'project_release_submit', 'access' => node_access('update', $node), 'weight' => 1, 'type' => MENU_CALLBACK);
        }
      }
    }
  }

  return $items;
}

function project_page() {
  global $user;

  if (!user_access('access projects')) {
    drupal_goto(url());
  }

  switch (arg(1)) {
    default:
      project_page_overview();
      break;

      if ($vid = db_result(db_query_range("SELECT vid FROM vocabulary WHERE INSTR(nodes, 'project_project') ORDER BY weight DESC", 0, 1))) {
        $result = db_queryd("SELECT DISTINCT(n.nid), n.title, t.tid, t.name, t.weight FROM {node} n INNER JOIN {term_node} l ON n.nid = l.nid INNER JOIN {term_data} t ON l.tid = t.tid ". node_access_join_sql() ." WHERE ". node_access_where_sql() ." AND t.vid = %d AND n.type = 'project_project' AND n.status = 1 ORDER BY t.weight, n.title", $vid);
      }
      else {
        $result = db_queryd("SELECT DISTINCT(n.nid), n.title FROM {node} n USING(nid) ". node_access_join_sql() ." WHERE ". node_access_where_sql() ." AND n.type = 'project_project' AND n.status = 1 ORDER BY title");
      }

      $vocabulary = array(
        'nodes' => array('project_project'),
        'name' => 'Projects',
        'hierarchy' => 1
      );
      #$vocabulary = taxonomy_save_vocabulary($vocabulary);
      $vocabulary['vid'] = 5;
      while ($project = db_fetch_object($result)) {
        if ($project->name != $last) {
          print "$project->name<br />";
          $last = $project->name;
          $term = array(
            'name' => $last,
            'weight' => $project->weight,
            'vid' => $vocabulary['vid']
          );
          #$parent = taxonomy_save_term($term)
          ++$parent['tid'];
        }
        $term = array(
          'name' => $project->title,
          'parent' => $parent['tid'],
          'vid' => $vocabulary['vid']
        );
        var_dump($term);
      }
  }
}

function project_page_overview() {
  if (function_exists('taxonomy_get_vocabularies')) {
    $vocabulary = current(taxonomy_get_vocabularies('project_project'));
    $terms = taxonomy_get_tree($vocabulary->vid);
    
    if (arg(1)) {
      foreach ($terms as $term) {
        if ($term->name == arg(1)) {
          break;
        }
      }
    }
    else {
      $term = current($terms);
    }

    if ($term->description) {
      $output .= $term->description;
    }
    $result = db_query("SELECT DISTINCT(n.nid), n.title, n.changed, p.issues FROM {node} n INNER JOIN {project_projects} p ON n.nid = p.nid ". node_access_join_sql() ." LEFT JOIN {term_node} r ON n.nid = r.nid WHERE ". node_access_where_sql() ." AND n.status = 1 AND r.tid = %d ORDER BY n.title ASC", $term->tid);
  }
  else {
    $result = db_query("SELECT DISTINCT(n.nid), n.title, n.changed, p.issues FROM {node} n INNER JOIN {project_projects} p ON n.nid = p.nid ". node_access_join_sql() ." WHERE ". node_access_where_sql() ." AND n.status = 1 ORDER BY n.title ASC");
  }

  $header = array(
    array('data' => t('Project')),
    array('data' => t('Issues'), 'colspan' => 3)
  );

  $rows = array();
  while ($node = db_fetch_object($result)) {
    $row = array(l($node->title, "node/$node->nid") . $node->rid);
    if ($node->issues) {
      $row[] = l(t('issues'), "project/issues/$node->nid");
      $row[] = l(t('search'), "project/issues/$node->nid/search");
      $row[] = l(t('submit'), "node/add/project_issue/$node->nid");
    }
    $rows[] = $row;
  }

  $output .= '<div class="project">'. theme('table', NULL, $rows) .'</div>';

  print theme('page', $output);
}

function project_page_user($arg = 0) {
  if ($arg) {
    $user = db_fetch_object(db_query("SELECT uid, name FROM {users} WHERE uid = %d OR name = '%s'", $arg, $arg));
    if ($user) {
      drupal_set_title(t('Projects by %user', array('%user' => $user->name)));
    }
  }

  if (!$user) {
    global $user;
  }

  $header = array(
    array('data' => t('Project'), 'field' => 'n.title', 'sort' => 'asc'),
    array('data' => t('Updated'), 'field' => 'n.changed'),
    array('data' => t('Issues'), 'colspan' => 4, 'field' => 'count')
  );

  $result = db_query("SELECT DISTINCT(n.nid), n.title, n.changed, COUNT(p.nid) AS count FROM {node} n LEFT JOIN {project_issues} p ON n.nid = p.pid AND p.state IN (1,2,8) ". node_access_join_sql() ." WHERE n.type = 'project_project' AND n.status = 1 AND n.uid = %d AND ". node_access_where_sql() ." GROUP BY n.nid %s", $user->uid, tablesort_sql($header));

  while ($node = db_fetch_object($result)) {
    $rows[] = array(
      l($node->title, "node/$node->nid"),
      array('data' => format_interval(time() - $node->changed, 2), 'align' => 'right'),
      array('data' => "$node->count open", 'align' => 'right'),
      l(t('view'), "project/issues/$node->nid"),
      l(t('search'), "project/issues/$node->nid/search"),
      l(t('submit'), "node/add/project_issue/$node->nid")
    );
    $query->projects[] = $node->nid;
  }

  $output = '<div class="project">'. theme('table', $header, $rows) .'</div>';
  $output .= l('#', "project/user/$user->name");

  $output .= theme('box', t('issues'), project_issue_query_result($query, 'html', false));

  print theme('page', $output);
}

/*
function project_search($keys) {
  $find = array();
  $result = db_query_range("SELECT DISTINCT(n.nid), n.title, n.created, u.uid, u.name FROM {project_issues} p INNER JOIN {node} n USING (nid) INNER JOIN {users} u USING (uid) WHERE n.status = 1 AND n.body LIKE '%%%s%%' ORDER BY n.changed DESC", $keys, 0, 100);
  while ($node = db_fetch_object($result)) {
    $find[] = array("title" => $node->title, "link" => url("node/$node->nid"), "user" => format_name($node), 'date' => $node->created);
  }
  return array(t('Project issues'), $find);
}
*/

// Special project stuff
function project_types() {
  return array('project_project', 'project_issue');
}

function project_file_download($file) {
  if (user_access('access project issues')) {
    $file = file_create_path($file);
    if ($mime = db_result(db_query("SELECT file_mime FROM {project_issues} WHERE file_path = '%s'", $file))) {
      return array("Content-type: $mime");
    }
    if ($mime = db_result(db_query("SELECT file_mime FROM {project_comments} WHERE file_path = '%s'", $file))) {
      return array("Content-type: $mime");
    }
  }
}

?>

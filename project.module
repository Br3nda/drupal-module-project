<?php
// $Id: project.module,v 1.209 2005/10/03 15:48:10 nedjo Exp $

// project nodes    -> project_projects
// project releases -> project_releases

// issue nodes      -> project_issues
// issue comments   -> project_comments

$path = drupal_get_path('module', 'project');
if (file_exists("$path/project.inc")) {
  require_once "$path/project.inc";
  require_once "$path/release.inc";
  require_once "$path/issue.inc";
  require_once "$path/comment.inc";
  require_once "$path/mail.inc";
}

function project_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Enables teams to track outstanding items which need resolution.');
    case 'admin/help#project':
      $help = '<h3>Mailhandler support</h3>'.
              '<p>Basic mail format:</p>'.
              '<pre>'.
              "Type: project\n".
              "Project: chatbox\n".
              "Category: bug report\n".
              "Version: cvs\n".
              "Priority: normal\n".
              "Status: active\n".
              "Component: code\n\n".
              "Whatever I type here will be the body of the node.\n".
              '</pre>'.
              "<p>See the mailhandler help for more information on using the mailhandler module.</p>\n";
      return $help;
    case 'node/add#project_project':
      return t('A project enables teams to track outstanding items which need resolution');
    case 'node/add#project_issue':
      return t('Add a new issue (bug report, feature request, etc) to an existing project.');
    case 'node/add/project_project':
      return variable_get('project_help_node_add', '');
    case 'admin/settings/project/status':
      return t('<p>Use this page to add new status options for project issues or to change or delete existing options.<dl>
      <dt>Adding</dt><dd>To add a new status option, put its name in one of the blank places at the bottom of the form and assign it a weight.</dd></p>
      <dt>Updating</dt><dd>When renaming existing issues, keep in mind that issues with the existing name will receive the new one.</dd>
      <dt>Deleting</dt><dd>If you delete an existing issue status, you will be prompted for a new status to assign to existing issues with the deleted status.</dd>
      <dt>Weight</dt><dd>The weight of an issue determines the order it appears in lists, like in the select box where users designate a status for their issue.</dd>
      <dt>Author may set</dt><dd>Check this option to give the original poster of an issue the right to set a status option, even if she or he isn\'t part of a role with this permission.  You may wish, for example, to allow issue authors to close their own issues.</dd>
      <dt>Default</dt><dd>The default status option will be used for new issues, and all users with the permission to create issues will automatically have permission to set this status.  The default issue status cannot be deleted.  If you wish to delete this status, first set a different status to default.</dd>
      </dl></p>');
  }
}

function project_node_info() {
  return array(
    'project_project' => array('name' => t('project'), 'base' => 'project_project'),
    'project_issue' => array('name' => t('issue'), 'base' => 'project_issue'));
}

function project_perm() {
  $perms = array(
    'administer projects',
    'maintain projects',
    'access projects',
    'access own projects',
    'create project issues',
    'access project issues',
    'access own project issues'
  );
  $states = project_issue_state();
  foreach($states as $key => $value) {
    $perms[] = "set issue status ". str_replace("'", "", $value);
  }
  return $perms;
}

function project_settings() {

  $project_directory = file_create_path(variable_get('project_directory_issues', 'issues'));
  if (!file_check_directory($project_directory)) {
    $error['project_directory_issues'] = theme('error', t('Directory does not exist, or is not writable.'));
  }

  $versions = array(-1 => t('all')) + project_releases_list();

  $output = form_textfield(t('Release directory'), 'project_release_directory', variable_get('project_release_directory', ''), 50, 255, t('Leave this blank if project maintainers are to create their own release packages. This is useful if releases are generated by an external tool.'));
  $output .= form_radios(t('Unmoderate projects with releases'), 'project_release_unmoderate', variable_get('project_release_unmoderate', 0), array('Disabled', 'Enabled'));
  $output .= form_checkbox(t('Browse projects by releases'), 'project_browse_releases', 1, variable_get('project_browse_releases', 1), t('Checking this box will cause the project browsing page to have version subtabs.'));
  $output .= form_radios(t('Default release overview'), 'project_release_overview', variable_get('project_release_overview', -1), $versions, t('Default release version to list on the overview page'));
  $output .= form_textfield(t('Issue directory'), 'project_directory_issues', variable_get('project_directory_issues', 'issues'), 30, 255, t("Subdirectory in the directory '%dir' where attachment to issues will be stored.", array('%dir' => variable_get('file_directory_path', 'files') .'/')));

  if (module_exist('mailhandler')) {
    // TODO: move this stuff to mailhandler.module ?
    $items = array(t('<none>'));
    $result = db_query('SELECT mail FROM {mailhandler} ORDER BY mail');
    while ($mail = db_result($result, $i++)) {
      $items[$mail] = $mail;
    }

    $output .= form_select(t('Reply-to address on e-mail notifications'), 'project_reply_to', variable_get('project_reply_to', ''), $items);
  }

  return $output;
}

function project_cron() {
  if (variable_get('project_release_directory', '') && time() - variable_get('project_release_directory_last', 0) > variable_get('project_release_directory_interval', 6 * 60 * 60)) {
    variable_set('project_release_directory_last', time());
    project_release_cron();
  }

  if (time() - variable_get('project_digest_last', 0) > variable_get('project_digest_interval', 7 * 24 * 60 * 60)) {
    variable_set('project_digest_last', time());
    project_mail_digest();
  }

  if (time() - variable_get('project_reminder_last', 0) > variable_get('project_reminder_interval', 28 * 7 * 24 * 60 * 60)) {
    variable_set('project_reminder_last', time());
    project_mail_reminder();
  }

  $result = db_query(db_rewrite_sql('SELECT p.nid, p.pid, p.category, p.component, p.priority, p.assigned, p.sid, n.title FROM {project_issues} p INNER JOIN {node} n ON n.nid = p.nid WHERE n.status = 1 AND p.sid = 2 AND n.changed < %d', 'p'), time() - 14 * 24 * 60 * 60);
  while ($node = db_fetch_object($result)) {
    foreach (array('nid', 'pid', 'category', 'component', 'priority', 'assigned', 'sid', 'title') as $var) {
      $comment->$var = $node->$var;
    }
    $comment->sid = 7;
    project_comment_save($comment);
  }
}

function project_link($type, $node = 0, $main = 0) {
  $links = array();

  switch ($type) {
    case 'page':
      if (user_access('access projects')) {
        $links[] = l(t('projects'), 'project', array('title' => t('View all projects.')));
      }
      break;
    case 'node':
      if ($node->type == 'project_issue') {
        if (user_access('create project issues')) {
          $project = node_load(array('nid' => $node->pid, 'type' => 'project_project'));
          $links[] = l(t('follow up'), "project/comments/add/$node->nid");
        }
      }
      break;
  }

  return $links;
}

function project_menu($may_cache) {
  $items = array();

  drupal_set_html_head(theme('stylesheet_import', drupal_get_path('module', 'project') .'/project.css'));

  if ($may_cache) {
    // User pages:
    $access = user_access('access projects');

    $items[] = array('path' => 'project', 'title' => t('projects'), 'callback' => 'project_page_overview', 'access' => $access, 'type' => MENU_NORMAL_ITEM);

    // Project browsing pages
    $vocabs = taxonomy_get_vocabularies('project_project');
    if (module_exist('taxonomy') && $vocabulary = current($vocabs)) {
      $terms = taxonomy_get_tree($vocabulary->vid);
      $releases = variable_get('project_browse_releases', 1);

      foreach ($terms as $i => $term) {
        $items[] = array('path' => 'project/'. $term->name,
                         'title' => $term->name,
                         'callback' => 'project_page_overview',
                         'access' => $access,
                         'type' => $i == 0 ? MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK,
                         'weight' => $term->weight,
                         'callback arguments' => array($term->name));

        if ($releases) {
          $j = 0;
          if (variable_get('project_release_overview', -1) == -1) {
            $items[] = array('path' => 'project/'. $term->name .'/all',
                             'title' => t('all'),
                             'type' => MENU_DEFAULT_LOCAL_TASK,
                             'weight' => $j++);
          }
          foreach (project_releases_list() as $v => $version) {
            $items[] = array('path' => 'project/'. $term->name .'/'. $v,
                             'title' => $version,
                             'callback' => 'project_page_overview',
                             'access' => $access,
                             'type' => ($v == variable_get('project_release_overview', -1) ? MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK),
                             'weight' => $j++,
                             'callback arguments' => array($term->name, $v));
          }
        }
      }
    }

    $items[] = array('path' => 'project/user', 'title' => t('my projects'), 'callback' => 'project_page_user', 'access' => $GLOBALS['user']->uid && $access, 'type' => MENU_NORMAL_ITEM);

    // Developers
    $items[] = array('path' => 'project/developers', 'title' => t('developers'), 'callback' => 'project_developers', 'access' => $access, 'type' => MENU_CALLBACK);

    // CVS messages:
    $items[] = array('path' => 'project/cvs', 'title' => t('CVS'), 'callback' => 'project_cvs', 'access' => $access, 'type' => MENU_CALLBACK);

    // Create projects
    $access = user_access('maintain projects');
    $items[] = array('path' => 'node/add/project_project', 'title' => t('project'), 'callback' => 'node_page', 'access' => $access, 'type' => MENU_NORMAL_ITEM);

    // Issues
    $access = user_access('access project issues');
    $items[] = array('path' => 'project/issues', 'title' => t('issues'), 'callback' => 'project_issue_page', 'access' => $access, 'type' => MENU_NORMAL_ITEM);
    $items[] = array('path' => 'project/issues/user', 'title' => t('my issues'), 'callback' => 'project_issue_page', 'access' => $GLOBALS['user']->uid && $access, 'type' => MENU_NORMAL_ITEM);
    $items[] = array('path' => 'project/issues/subscribe', 'title' => t('subscribe'), 'callback' => 'project_issue_page', 'access' => $GLOBALS['user']->uid && $access, 'type' => MENU_NORMAL_ITEM);
    $items[] = array('path' => 'project/issues/add', 'title' => t('submit'), 'callback' => 'project_issue_page', 'access' => $access, 'type' => MENU_NORMAL_ITEM);
    $items[] = array('path' => 'project/issues/statistics', 'title' => t('statistics'), 'callback' => 'project_issue_page', 'access' => $access, 'type' => MENU_NORMAL_ITEM);
    $items[] = array('path' => 'project/issues/search', 'title' => t('search'), 'callback' => 'project_issue_page', 'access' => $access, 'type' => MENU_NORMAL_ITEM);

    // Create issues
    $access = user_access('create project issues');
    $items[] = array('path' => 'node/add/project_issue', 'title' => t('issue'), 'callback' => 'node_page', 'access' => $access, 'type' => MENU_NORMAL_ITEM, 'weight' => 1);

    // Administer issue status settings
    $access = user_access('administer projects');
    $items[] = array('path' => 'admin/settings/project/status', 'title' => t('status options'), 'callback' => 'project_issue_admin_states_page', 'access' => $access, 'type' => MENU_NORMAL_ITEM);
    $items[] = array('path' => 'admin/settings/project/status/save', 'title' => t('save'), 'callback' => 'project_issue_admin_states_page', 'access' => $access, 'type' => MENU_CALLBACK);
    $items[] = array('path' => 'admin/settings/project/status/delete', 'title' => t('delete'), 'callback' => 'project_issue_admin_states_page', 'access' => $access, 'type' => MENU_CALLBACK);

    // Comments
    $access = user_access('create project issues');
    $items[] = array('path' => 'project/comments', 'title' => t('comments'), 'callback' => 'project_comment_page', 'access' => $access, 'type' => MENU_CALLBACK);

    // Releases
    if (variable_get('project_release_directory', '')) {
      $access = user_access('administer projects');
      $items[] = array('path' => 'admin/settings/project/reload', 'title' => t('scan for releases'), 'callback' => 'project_release_scan', 'access' => $access, 'type' => MENU_NORMAL_ITEM);
    }
  }
  else {
    if (arg(0) == 'node' && is_numeric(arg(1))) {
      $node = node_load(array('nid' => arg(1)));
      if ($node->type == 'project_project') {
        $items[] = array('path' => 'node/'. arg(1) .'/release', 'title' => t('releases'), 'callback' => 'project_project_releases', 'access' => node_access('view', $node), 'weight' => 0, 'type' => MENU_CALLBACK);

        if (node_access('update', $node)) {
          $items[] = array('path' => 'node/'. arg(1) .'/release/overview', 'title' => t('overview'), 'callback' => 'project_project_releases', 'access' => node_access('view', $node), 'weight' => 0, 'type' => MENU_CALLBACK);
        }

        if (!variable_get('project_release_directory', '')) {
          $items[] = array('path' => 'node/'. arg(1) .'/release/add', 'title' => t('add'), 'callback' => 'project_release_submit', 'access' => node_access('update', $node), 'weight' => 1, 'type' => MENU_CALLBACK);
        }
        if (arg(2) == 'release' && is_numeric(arg(4))) {
          $items[] = array('path' => 'node/'. arg(1) .'/release/edit/'. arg(4), 'title' => t('edit'), 'callback' => 'project_release_submit', 'access' => node_access('update', $node), 'weight' => 1, 'type' => MENU_CALLBACK);
          $items[] = array('path' => 'node/'. arg(1) .'/release/delete/'. arg(4), 'title' => t('edit'), 'callback' => 'project_release_submit', 'access' => node_access('update', $node), 'weight' => 1, 'type' => MENU_CALLBACK);
        }
      }
    }
  }

  return $items;
}

function project_page() {
  global $user;

  switch (arg(1)) {
    default:
      project_page_overview();
      break;
  }
}

function project_page_overview($termname = NULL, $version = NULL) {
  // If browsing by taxonomy, only fetch projects for this term
  $vocabs = taxonomy_get_vocabularies('project_project');
  if (function_exists('taxonomy_get_vocabularies') && ($vocabulary = current($vocabs))) {
    $terms = taxonomy_get_tree($vocabulary->vid);

    if ($termname) {
      foreach ($terms as $term) {
        if ($term->name == $termname) {
          break;
        }
      }
    }
    else {
      $term = current($terms);
    }

    if ($term->description) {
      $output .= $term->description;
    }
    $result = db_query(db_rewrite_sql("SELECT n.nid, n.title, nr.teaser, nr.format, n.changed, p.issues FROM {node} n INNER JOIN {node_revisions} nr ON n.vid = nr.vid INNER JOIN {project_projects} p ON n.nid = p.nid LEFT JOIN {term_node} r ON n.nid = r.nid WHERE n.status = 1 AND r.tid = %d ORDER BY n.title ASC"), $term->tid);
  }
  // Fetch all projects
  else {
    $result = db_query(db_rewrite_sql("SELECT n.nid, n.title, nr.teaser, nr.format, n.changed, p.issues FROM {node} n INNER JOIN {node_revisions} nr ON n.vid = nr.vid INNER JOIN {project_projects} p ON n.nid = p.nid WHERE n.status = 1 ORDER BY n.title ASC"));
  }

  $header = array(
    array('data' => t('Projects'))
  );

  $rows = array();
  while ($node = db_fetch_object($result)) {
    $version = $version ? $version : variable_get('project_release_overview', -1);
    // If browsing by version, see if this project has a release for this version. If so, get the latest.
    if ($version != -1) {
      $result2 = db_query_range("SELECT path, version, changed FROM {project_releases} WHERE nid = %d AND status = 1 AND path <> '' AND version LIKE '%s%%' ORDER BY created DESC", $node->nid, $version, 0, 1);
    }
    // Otherwise display any project with at least one release. Get the latest release.
    else {
      $result2 = db_query_range("SELECT path, version, changed FROM {project_releases} WHERE nid = %d AND status = 1 AND created > 0 AND path <> '' ORDER BY created DESC", $node->nid, 0, 1);
    }
    $project = new StdClass();
    $project->nid = $node->nid;
    $project->title = $node->title;
    $project->term = $termname;
    $project->version = $version;
    $project->body = check_markup($node->teaser, $node->format, false);

    $project->links = array();
    if ($release = db_fetch_object($result2)) {
      $project->links[] = '<a href="' . $release->path . '">' . t('Download') . '</a>';
    }
    $project->links[] = l(t('Find out more'), "node/$node->nid");
    if ($node->issues) {
      $project->links[] = l(t('Bugs and feature requests'), "project/issues/$node->nid");
    }

    $rows[] = array(theme('project_summary', $project));
  }

  $output .= '<div class="project">'. theme('table', $header, $rows, array('id' => 'project-overview')) .'</div>';

  return $output;
}

function project_user($type, $edit, &$user, $category = NULL) {
  if ($type == 'view') {
    if ($projects = module_invoke('cvs', 'get_contributed_projects', $user->uid)) {
      return array(t('Projects') => $projects);
    }
  }
}

function project_page_user($arg = 0) {
  $current_user = FALSE;
  if ($arg) {
    $user = db_fetch_object(db_query("SELECT uid, name FROM {users} WHERE uid = %d OR name = '%s'", $arg, $arg));
    if ($user) {
      drupal_set_title(t('Projects by %user', array('%user' => $user->name)));
    }
  }

  if (!$user) {
    global $user;
    $current_user = TRUE;
  }

  if (!$user->uid) {
    return t('You need to log in to see your projects.');
  }

  $header = array(
    array('data' => t('Project'), 'field' => 'n.title', 'sort' => 'asc'),
    array('data' => t('Updated'), 'field' => 'n.changed'),
    array('data' => t('Issues'), 'colspan' => 4, 'field' => 'count')
  );

  $result = db_query(db_rewrite_sql("SELECT n.nid, n.title, n.changed, COUNT(p.nid) AS count FROM {node} n LEFT JOIN {project_issues} p ON n.nid = p.pid AND p.sid IN (1,2,8,13,14) WHERE n.type = 'project_project' AND n.status = 1 AND n.uid = %d GROUP BY n.nid, n.title, n.changed %s"), $user->uid, tablesort_sql($header));

  if (!db_num_rows($result)) {
    return ($current_user ? t('You have no projects.') : t('This user has no projects.'));
  }

  while ($node = db_fetch_object($result)) {
    $rows[] = array(
      l($node->title, "node/$node->nid"),
      array('data' => format_interval(time() - $node->changed, 2), 'align' => 'right'),
      array('data' => "$node->count open", 'align' => 'right'),
      l(t('view'), "project/issues/$node->nid"),
      l(t('search'), "project/issues/$node->nid/search"),
      l(t('submit'), "node/add/project_issue/$node->nid")
    );
    $query->projects[] = $node->nid;
  }

  $output = '<div class="project">'. theme('table', $header, $rows) .'</div>';
  $output .= l('#', "project/user/$user->name");

  $output .= theme('box', t('issues'), project_issue_query_result($query, 'html', false));

  return $output;
}

// Special project stuff
function project_types() {
  return array('project_project', 'project_issue');
}

function project_file_download($file) {
  if (user_access('access project issues')) {
    $file = file_create_path($file);
    if ($mime = db_result(db_query("SELECT file_mime FROM {project_issues} WHERE file_path = '%s'", $file))) {
      return array("Content-type: $mime");
    }
    if ($mime = db_result(db_query("SELECT file_mime FROM {project_comments} WHERE file_path = '%s'", $file))) {
      return array("Content-type: $mime");
    }
  }
}

// Themables

/**
 * Theme a compact project view/summary.
 *
 * $project has the following fields:
 * - title: Title
 * - nid: Node id 
 * - body: Filtered description
 * - term: String with the selected term name
 * - version: String with the version
 * - links: Array of links
 */
function theme_project_summary($project) {
  $output = '<h2>'. l($project->title, "node/$project->nid") .'</h2>';
  $output .= $project->body;
  $output .= theme('links', $project->links);
  return $output;
}

?>

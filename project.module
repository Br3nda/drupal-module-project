<?php
// $Id: project.module,v 1.240 2006/05/20 14:25:37 dww Exp $

// project nodes    -> project_projects
// project releases -> project_releases

// issue nodes      -> project_issues
// issue comments   -> project_comments

$path = drupal_get_path('module', 'project');
if (file_exists("$path/project.inc")) {
  require_once "$path/project.inc";
  require_once "$path/release.inc";
  require_once "$path/issue.inc";
  require_once "$path/comment.inc";
  require_once "$path/mail.inc";
}

function project_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Enables teams to track outstanding items which need resolution.');
    case 'admin/help#project':
      $help = t('<h3>Mailhandler support</h3>'.
              '<p>Basic mail format:</p>'.
              '<pre>'.
              "Type: project\n".
              "Project: chatbox\n".
              "Category: bug report\n".
              "Version: cvs\n".
              "Priority: normal\n".
              "Status: active\n".
              "Component: code\n\n".
              "Whatever I type here will be the body of the node.\n".
              '</pre>'.
              "<p>See the mailhandler help for more information on using the mailhandler module.</p>\n");
      return $help;
    case 'node/add#project_project':
      return t('A project enables teams to track outstanding items which need resolution');
    case 'node/add#project_issue':
      return t('Add a new issue (bug report, feature request, etc) to an existing project.');
    case 'node/add/project_project':
      if (module_exist('taxonomy')) {
        $tree = taxonomy_get_tree(_project_get_vid());
        // Extract the different project types, and, for the first type, up to three categories.
        foreach ($tree as $index => $term) {
          if ($term->depth == 0) {
            $types[] = $term->name;
          }
          elseif (($term->depth == 1) && ($index == 1) && (count($categories)< 3)) {
            $categories[] = $term->name;
          }
        }
        if (count($categories)) {
          $help = t('<p>Properly categorizing your project will help ensure that users can find it easily.  Please follow these steps:</p>
          <ul>
            <li>Select <em>one</em> of the first-level terms (%types) as the project type.</li>
            <li>Then choose <em>one or more</em> categories below this term to classify your project.  For example, for %type, you would choose from the various %type types: %categories, and so on.</li>
          </ul>', array('%types' => implode (', ', $types), '%type' => $types[0], '%categories' => implode (', ', $categories)));
        }
      }
      $help .= variable_get('project_help_node_add', '');
      return $help;
    case 'admin/settings/project':
      if (module_exist('taxonomy')) {
        $vid = _project_get_vid();
        return t('<p>The project module makes special use of the taxonomy (category) system.  A special vocabulary, "Projects", has been created automatically.</p>
        <p>To take full advantage of project categorization, add at least two levels of terms to this vocabulary.  The first level will be the basic project types, e.g., "modules", "themes", "translations".</p>
        <p>Subterms of each of these types will be the categories that users can select to classify the projects.  For example, "modules" might have sub-terms including "mail" and "XML".</p>
        <p>Use the <a href="%taxonomy-admin">vocabulary admin page</a> to view and add terms.</p>', array('%taxonomy-admin' => url('admin/taxonomy/' . $vid)));
      }
    case 'admin/settings/project/status':
      return t('<p>Use this page to add new status options for project issues or to change or delete existing options.<dl>
      <dt>Adding</dt><dd>To add a new status option, put its name in one of the blank places at the bottom of the form and assign it a weight.</dd></p>
      <dt>Updating</dt><dd>When renaming existing issues, keep in mind that issues with the existing name will receive the new one.</dd>
      <dt>Deleting</dt><dd>If you delete an existing issue status, you will be prompted for a new status to assign to existing issues with the deleted status.</dd>
      <dt>Weight</dt><dd>The weight of an issue determines the order it appears in lists, like in the select box where users designate a status for their issue.</dd>
      <dt>Author may set</dt><dd>Check this option to give the original poster of an issue the right to set a status option, even if she or he isn\'t part of a role with this permission.  You may wish, for example, to allow issue authors to close their own issues.</dd>
      <dt>Default</dt><dd>The default status option will be used for new issues, and all users with the permission to create issues will automatically have permission to set this status.  The default issue status cannot be deleted.  If you wish to delete this status, first set a different status to default.</dd>
      </dl></p>');
  }
}

/**
 * Implementation of hook_block().
 */
function project_block($op = 'list', $delta = 0) {
  if ($op == 'list') {
    $blocks[0]['info'] = t('Project navigation');
    return $blocks;
  }
  else if ($op == 'view') {
    $projects = array_merge(array(0 => t('<select a project>')), project_projects_select_options('node/'));
    $block['subject'] = t('Project navigation');
    $block['content'] = drupal_get_form('project_quick_navigate_form', project_quick_navigate_form($projects));

    return $block;
  }
}

function project_node_info() {
  return array(
    'project_project' => array('name' => t('project'), 'base' => 'project_project'),
    'project_issue' => array('name' => t('issue'), 'base' => 'project_issue'));
}

function project_perm() {
  $perms = array(
    'administer projects',
    'maintain projects',
    'access projects',
    'access own projects',
    'create project issues',
    'access project issues',
    'access own project issues'
  );
  $states = project_issue_state();
  foreach($states as $key => $value) {
    $perms[] = "set issue status ". str_replace("'", "", $value);
  }
  return $perms;
}

/**
 * Implementation of hook_settings().
 */
function project_settings() {

  $project_directory = file_create_path(variable_get('project_directory_issues', 'issues'));
  if (!file_check_directory($project_directory)) {
    $error['project_directory_issues'] = theme('error', t('Directory does not exist, or is not writable.'));
  }

  $versions = array(-1 => t('all')) + project_releases_list();
  $sort_methods = drupal_map_assoc(array_keys(module_invoke_all('project_sort_methods', 'methods')));
  
  $form['releases'] = array('#type' => 'fieldset',
    '#title' => t('Releases'),
    '#collapsible' => TRUE,
  );
  $form['releases']['project_release_directory'] = array(
    '#type' => 'textfield',
    '#title' => t('Release directory'),
    '#default_value' => variable_get('project_release_directory', ''),
    '#size' => 50,
    '#maxlength' => 255,
    '#description' => t('Leave this blank if project maintainers are to create their own release packages. This is useful if releases are generated by an external tool.'),
  );

  $form['releases']['project_release_unmoderate'] = array(
    '#type' => 'radios',
    '#title' => t('Unmoderate projects with releases'),
    '#default_value' => variable_get('project_release_unmoderate', 0),
    '#options' => array('Disabled', 'Enabled'),
  );

  $form['releases']['project_browse_releases'] = array(
    '#type' => 'checkbox',
    '#title' => t('Browse projects by releases'),
    '#default_value' => variable_get('project_browse_releases', 0),
    '#description' => t('Checking this box will cause the project browsing page to have a version select.'),
  );

  $form['releases']['project_release_overview'] = array(
    '#type' => 'radios',
    '#title' => t('Default release overview'),
    '#default_value' => variable_get('project_release_overview', -1),
    '#options' => $versions,
    '#description' => t('Default release version to list on the overview page'),
  );

  $form['browsing'] = array(
   '#type' => 'fieldset',
    '#title' => t('Browsing options'),
    '#collapsible' => TRUE,
  );

  $form['browsing']['project_sort_method'] = array(
    '#type' => 'radios',
    '#title' => t('Default sort option'),
    '#default_value' => variable_get('project_sort_method', 'category'),
    '#options' => $sort_methods,
    '#description' => t('Default sorting option to use on the overview page'),
  );

  $form['browsing']['sort_methods'] = array(
    '#type' => 'fieldset',
    '#title' => t('Enabled sorting options'),
  );

  $tree = taxonomy_get_tree(_project_get_vid(), 0 , -1, 1);
  foreach ($tree as $term) {
    $form['browsing']['sort_methods']['project_sort_method_used_' . $term->tid] = array(
      '#type' => 'checkboxes',
      '#title' => $term->name,
      '#default_value' => variable_get('project_sort_method_used_' . $term->tid, array_keys($sort_methods)),
      '#options' => $sort_methods,
      '#description' => t('Sorting options to enable for %term', array('%term' => $term->name))
    );
  }
  $form['browsing']['project_browse_nodes'] = array(
    '#type' => 'select', '#title' => t('Number of projects to list in paged browsing'),
    '#default_value' => variable_get('project_browse_nodes', 30),
    '#options' =>  drupal_map_assoc(array(5, 10, 15, 20, 25, 30, 35, 40, 45, 50)),
    '#description' => t('The default maximum number of projects to list when browsing lists, e.g., by category.')
  );

  $form['project_directory_issues']  = array(
    '#type' => 'textfield',
    '#title' => t('Issue directory'),
    '#default_value' => variable_get('project_directory_issues', 'issues'),
    '#size' => 30,
    '#maxlength' => 255,
    '#description' => t("Subdirectory in the directory '%dir' where attachment to issues will be stored.", array('%dir' => variable_get('file_directory_path', 'files') . '/')),
  );

  if (module_exist('forum')) {
    $form['project_support_forum'] = taxonomy_form(_forum_get_vid(), variable_get('project_support_forum', ''), t('Select the support forum for projects'), 'project_support_forum');
  }

  if (module_exist('mailhandler')) {
    // TODO: move this stuff to mailhandler.module ?
    $items = array(t('<none>'));
    $result = db_query('SELECT mail FROM {mailhandler} ORDER BY mail');
    while ($mail = db_result($result, $i++)) {
      $items[$mail] = $mail;
    }

    $form['project_reply_to'] = array(
      '#type' => 'select',
      '#title' => t('Reply-to address on e-mail notifications'),
      '#default_value' => variable_get('project_reply_to', ''),
      '#options' => $items,
    );

  }
  
  // If the project_sort_method setting has changed, the menu will need to be rebuilt.
  menu_rebuild();
  return $form;
}

function project_cron() {
  if (variable_get('project_release_directory', '') && time() - variable_get('project_release_directory_last', 0) > variable_get('project_release_directory_interval', 6 * 60 * 60)) {
    variable_set('project_release_directory_last', time());
    project_release_cron();
  }

  if (time() - variable_get('project_digest_last', 0) > variable_get('project_digest_interval', 7 * 24 * 60 * 60)) {
    variable_set('project_digest_last', time());
    project_mail_digest();
  }

  if (time() - variable_get('project_reminder_last', 0) > variable_get('project_reminder_interval', 28 * 7 * 24 * 60 * 60)) {
    variable_set('project_reminder_last', time());
    project_mail_reminder();
  }

  $result = db_query(db_rewrite_sql('SELECT p.nid, p.pid, p.category, p.component, p.priority, p.assigned, p.sid, n.title FROM {project_issues} p INNER JOIN {node} n ON n.nid = p.nid WHERE n.status = 1 AND p.sid = 2 AND n.changed < %d', 'p'), time() - 14 * 24 * 60 * 60);
  while ($node = db_fetch_object($result)) {
    foreach (array('nid', 'pid', 'category', 'component', 'priority', 'assigned', 'sid', 'title') as $var) {
      $comment->$var = $node->$var;
    }
    $comment->sid = 7;
    project_comment_save($comment);
  }
}

function project_link($type, $node = 0, $main = 0) {
  $links = array();

  switch ($type) {
    case 'page':
      if (user_access('access projects')) {
        $links[] = l(t('projects'), 'project', array('title' => t('View all projects.')));
      }
      break;
    case 'node':
      if ($node->type == 'project_issue') {
        if (user_access('create project issues')) {
          $project = node_load(array('nid' => $node->pid, 'type' => 'project_project'));
          $links[] = l(t('follow up'), "project/comments/add/$node->nid");
        }
      }
      break;
  }

  return $links;
}

/**
 * Returns the vocabulary id for projects.
 */
function _project_get_vid() {
  $vid = variable_get('project_vocabulary', '');
  if (empty($vid)) {
    // Check to see if a project module vocabulary exists.
    $vid = db_result(db_query("SELECT vid FROM {vocabulary} WHERE module='%s'", 'project'));
    if (!$vid) {
      $edit = array('name' => t('Projects'), 'multiple' => 1, 'required' => 1, 'hierarchy' => 1, 'relations' => 0, 'module' => 'project', 'nodes' => array('project_project' => 1));
      // If there is already a vocabulary assigned to 'project_project' nodes, use it.
      $vocabularies = taxonomy_get_vocabularies('project_project');
      if (count($vocabularies)) {
        $vocabulary = reset($vocabularies);
        $edit['vid'] = $vocabulary->vid;
      }
      taxonomy_save_vocabulary($edit);
      $vid = $edit['vid'];
    }
    variable_set('project_vocabulary', $vid);
  }

  return $vid;
}

/**
 * Implementation of hook_term_path().
 */
function project_term_path($term) {
  // The path must include the first-level term name for this term.
  $tree = taxonomy_get_tree(_project_get_vid());
  $parents = taxonomy_get_parents_all($term->tid);
  foreach($parents as $parent) {
  $ancestors[] = $parent->tid;
  }
  foreach ($tree as $t) {
    if (in_array($t->tid, $ancestors) && $t->depth == 0) {
      $termname = $t->name;
      if ($term->name == $termname) {
        return "project/$termname";
      }
      break;
    }
  }
  return "project/$termname/category/$term->tid";
}

/**
 * Implementation of hook_taxonomy().
 */
function project_taxonomy($op, $type, $object = NULL) {
  if ($op == 'delete' && $type == 'vocabulary' && $object->vid == _project_get_vid())  {
    variable_del('project_vocabulary');
  }
  elseif ($type == 'term' && $object->vid == _project_get_vid()) {
    menu_rebuild();
  }
}

function project_menu($may_cache) {
  $items = array();
  global $user;

  if ($may_cache) {
    // User pages:
    $access = user_access('access projects');

    $items[] = array('path' => 'project',
      'title' => t('projects'),
      'callback' => 'project_page_overview',
      'access' => $access,
      'type' => MENU_NORMAL_ITEM);

    $items[] = array('path' => 'project/goto',
      'title' => t('project navigation'),
      'callback' => 'project_goto',
      'access' => $access,
      'type' => MENU_CALLBACK);

    $items[] = array('path' => 'project/autocomplete',
      'title' => t('autocomplete project'),
      'callback' => 'project_autocomplete',
      'access' => $access,
      'type' => MENU_CALLBACK);

    // Project browsing pages
    if (module_exist('taxonomy')) {
      $terms = taxonomy_get_tree(_project_get_vid());
      $releases = variable_get('project_browse_releases', 0);

      $sort_methods = module_invoke_all('project_sort_methods', 'methods');
      foreach ($terms as $i => $term) {
        // Only use the first-level terms.
        if ($term->depth == 0) {
          $items[] = array('path' => 'project/'. $term->name,
                           'title' => $term->name,
                           'access' => $access,
                           'type' => MENU_NORMAL_ITEM,
                           'weight' => $term->weight,
                           'callback arguments' => array($term->name));
          $j = 0;
          $term_methods = array_filter(variable_get('project_sort_method_used_' . $term->tid, $sort_methods));
          foreach ($term_methods as $sort_method) {
            $items[] = array('path' => 'project/' . $term->name . '/'. $sort_method,
                 'title' => t('browse by %sort_method', array('%sort_method' => $sort_method)),
                 'access' => $access,
                 'type' => (($sort_method == variable_get('project_sort_method', 'category') || (($j == 0) && !in_array(variable_get('project_sort_method', 'category'), $term_methods))) ? MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK),
                 'weight' => ($sort_method == variable_get('project_sort_method', 'category')) ? -10 : $j,
                 'callback arguments' => array($term->name, $sort_method));
            $j++;

          }
        }
      }
    }

    $items[] = array('path' => 'project/user', 'title' => t('my projects'), 'callback' => 'project_page_user', 'callback arguments' => $user->uid, 'access' => $user->uid && $access, 'type' => MENU_NORMAL_ITEM);

    // Developers
    $items[] = array('path' => 'project/developers', 'title' => t('developers'), 'callback' => 'project_developers', 'access' => $access, 'type' => MENU_CALLBACK);

    // CVS messages:
    $items[] = array('path' => 'project/cvs', 'title' => t('CVS'), 'callback' => 'project_cvs', 'access' => $access, 'type' => MENU_CALLBACK);

    // Create projects
    $access = user_access('maintain projects');
    $items[] = array('path' => 'node/add/project_project', 'title' => t('project'), 'callback' => 'node_page', 'access' => $access, 'type' => MENU_NORMAL_ITEM);

    // Issues
    $access = user_access('access project issues');
    $items[] = array('path' => 'project/issues', 'title' => t('issues'), 'callback' => 'project_issue_page', 'access' => $access, 'type' => MENU_NORMAL_ITEM);
    $items[] = array('path' => 'project/issues/user', 'title' => t('my issues'), 'callback' => 'project_issue_page', 'access' => $GLOBALS['user']->uid && $access, 'type' => MENU_NORMAL_ITEM);
    $items[] = array('path' => 'project/issues/subscribe', 'title' => t('subscribe'), 'callback' => 'project_issue_page', 'access' => $GLOBALS['user']->uid && $access, 'type' => MENU_NORMAL_ITEM);
    $items[] = array('path' => 'project/issues/add', 'title' => t('submit'), 'callback' => 'project_issue_page', 'access' => $access, 'type' => MENU_NORMAL_ITEM);
    $items[] = array('path' => 'project/issues/statistics', 'title' => t('statistics'), 'callback' => 'project_issue_page', 'access' => $access, 'type' => MENU_NORMAL_ITEM);
    $items[] = array('path' => 'project/issues/search', 'title' => t('search'), 'callback' => 'project_issue_page', 'access' => $access, 'type' => MENU_NORMAL_ITEM);

    // Create issues
    $access = user_access('create project issues');
    $items[] = array('path' => 'node/add/project_issue', 'title' => t('issue'), 'callback' => 'node_page', 'access' => $access, 'type' => MENU_NORMAL_ITEM, 'weight' => 1);

    // Administer issue status settings
    $access = user_access('administer projects');
    $items[] = array('path' => 'admin/settings/project/status', 'title' => t('status options'), 'callback' => 'project_issue_admin_states_page', 'access' => $access, 'type' => MENU_NORMAL_ITEM);
    $items[] = array('path' => 'admin/settings/project/status/save', 'title' => t('save'), 'callback' => 'project_issue_admin_states_page', 'access' => $access, 'type' => MENU_CALLBACK);
    $items[] = array('path' => 'admin/settings/project/status/delete', 'title' => t('delete'), 'callback' => 'project_issue_admin_states_page', 'access' => $access, 'type' => MENU_CALLBACK);

    // Comments
    $access = user_access('create project issues');
    $items[] = array('path' => 'project/comments', 'title' => t('comments'), 'callback' => 'project_comment_page', 'access' => $access, 'type' => MENU_CALLBACK);

    // Releases
    if (variable_get('project_release_directory', '')) {
      $access = user_access('administer projects');
      $items[] = array('path' => 'admin/settings/project/reload', 'title' => t('scan for releases'), 'callback' => 'project_release_scan', 'access' => $access, 'type' => MENU_NORMAL_ITEM);
    }
  }
  else {
    theme_add_style(drupal_get_path('module', 'project') .'/project.css');
    if (arg(0) == 'node' && is_numeric(arg(1))) {
      $node = node_load(arg(1));
      if ($node->type == 'project_project') {
        $items[] = array('path' => 'node/'. arg(1) .'/release', 'title' => t('releases'), 'callback' => 'project_project_releases', 'access' => node_access('view', $node), 'weight' => 0, 'type' => MENU_CALLBACK);

        if (node_access('update', $node)) {
          $items[] = array('path' => 'node/'. arg(1) .'/release/overview', 'title' => t('overview'), 'callback' => 'project_project_releases', 'access' => node_access('view', $node), 'weight' => 0, 'type' => MENU_CALLBACK);
        }

        if (!variable_get('project_release_directory', '')) {
          $items[] = array('path' => 'node/'. arg(1) .'/release/add', 'title' => t('add'), 'callback' => 'project_release_submit', 'access' => node_access('update', $node), 'weight' => 1, 'type' => MENU_CALLBACK);
        }
        if (arg(2) == 'release' && is_numeric(arg(4))) {
          $items[] = array('path' => 'node/'. arg(1) .'/release/edit/'. arg(4), 'title' => t('edit'), 'callback' => 'project_release_submit', 'access' => node_access('update', $node), 'weight' => 1, 'type' => MENU_CALLBACK);
          $items[] = array('path' => 'node/'. arg(1) .'/release/delete/'. arg(4), 'title' => t('edit'), 'callback' => 'project_release_submit', 'access' => node_access('update', $node), 'weight' => 1, 'type' => MENU_CALLBACK);
        }
      }
    }
  }

  return $items;
}

/**
 * Callback used in the project block to navigate to a requested project, or back to the requested page if no project specified.
 */
function project_goto() {
  if (!empty($_REQUEST['edit']['project_goto'])) {
    unset($_REQUEST['edit']['destination']);
    drupal_goto($_REQUEST['edit']['project_goto']);
  }
  else {
    drupal_goto();
  }
}

function project_page() {
  global $user;

  switch (arg(1)) {
    default:
      project_page_overview();
      break;
  }
}

function project_page_overview($termname = NULL, $sort_method = NULL) {
  global $form_values;

  $breadcrumb = array(l(t('Home'), NULL));
  $sort_methods = module_invoke_all('project_sort_methods', 'methods');

  // Read in requested version, if any.
  if ($_POST['edit']['rid']) {
    $version = $_POST['edit']['rid'];
  }
  else if ($_SESSION['project_version']) {
    $version = $_SESSION['project_version'];
  }
  else {
    $version = variable_get('project_release_overview', -1);
  }

  $version_form = drupal_get_form('project_version_filter_form', project_version_filter_form($version));
  if ($_POST['edit']['rid']) {
    $_SESSION['project_version'] = $form_values['rid'];
  }
  if (variable_get('project_browse_releases', 0)) {
    $output .= $version_form;
  }

  // If browsing by taxonomy, only fetch projects for this term.
  if (module_exist('taxonomy')) {
    $vid = _project_get_vid();
    if ($termname) {

      $term = db_fetch_object(db_query(db_rewrite_sql("SELECT t.tid, t.* FROM {term_data} t WHERE t.vid = %d AND t.name = '%s'", 't', 'tid'), $vid, $termname));

      $breadcrumb[] = l(t('projects'), 'project', array('title' => t('Browse projects')));

      if (!$sort_method) {
        // For the default, we use the overall default if enabled for this term, and if not we use the first enabled method.
        $term_methods = array_filter(variable_get('project_sort_method_used_' . $term->tid, $sort_methods));
        $sort_method = in_array(variable_get('project_sort_method', 'category'), $term_methods) ? variable_get('project_sort_method', 'category') : array_shift($term_methods);
      }

      if ($term->description) {
        $output .= '<p>' . filter_xss($term->description) . '</p>';
      }

      $module = $sort_methods[$sort_method];
      if (module_invoke($module, 'project_sort_methods', 'set term', $sort_method)) {

        $tree = taxonomy_get_tree(_project_get_vid(), $term->tid);
     
        $terms = array();
        if ($tree) {
          $tids = array();
          if (variable_get('project_browse_releases', 0) && $version != -1) {
            // Find all terms associated with the requested version.
            $result = db_query("SELECT t.tid, COUNT(DISTINCT(n.nid)) AS count FROM {term_node} t INNER JOIN {project_releases} p ON t.nid = p.nid INNER JOIN {node} n ON n.nid = t.nid WHERE (p.version LIKE '%s%%') AND (p.path <> '') AND (n.status = 1) GROUP BY t.tid", $version);
            $tids = array();
            while ($item = db_fetch_object($result)) {
              $tids[$item->tid] = $item->count;
            }
          }
          foreach ($tree as $cterm) {
            if (!variable_get('project_browse_releases', 0) || ($version == -1) || array_key_exists($cterm->tid, $tids)) {
              if ($tids[$cterm->tid]) {
                $cterm->count = $tids[$cterm->tid];
              }
              else {
                // We don't use taxonomy_term_count_nodes() because it includes child terms' counts.
                $result = db_query(db_rewrite_sql('SELECT t.tid, COUNT(n.nid) AS c FROM {term_node} t INNER JOIN {node} n ON t.nid = n.nid WHERE n.status = 1 AND t.tid = %d GROUP BY t.tid'), $cterm->tid);
                $term = db_fetch_object($result);
                $cterm->count = $term->c;
              }
              $terms[] = $cterm;
            }
          }
        }

        $tid = (arg(3) && is_numeric(arg(3))) ? arg(3) : project_default_tid();
        $term = taxonomy_get_term($tid);

      }

      // Set the default elements that will be used to construct the SQL statement.
      $sql_elements = array(
        'fields' => array(
          'prefix' => 'SELECT ',
          'glue' => ', ',
          'pieces' => array(
            'DISTINCT(n.nid)',
            'n.title',
            'nr.teaser',
            'nr.format',
            'p.issues'
          )
        ),
        'from' => array(
          'prefix' => ' FROM ',
          'glue' => NULL,
          'pieces' => array(
            '{node} n '
          )
        ),
        'joins' => array(
          'prefix' => '',
          'glue' => ' ',
          'pieces' => array(
            'INNER JOIN {node_revisions} nr ON n.vid = nr.vid',
            'INNER JOIN {project_projects} p ON n.nid = p.nid',
            'LEFT JOIN {term_node} r ON n.nid = r.nid'
          )
        ),
        'wheres' => array(
          'prefix' => ' WHERE ',
          'glue' => ' AND ',
          'pieces' => array(
            'n.status = 1',
            'r.tid = %d'
          )
        ),
        'group_bys' => array(
          'prefix' => ' GROUP BY ',
          'glue' => ', ',
          'pieces' => array(
          )
        ),
        'order_bys' => array(
          'prefix' => ' ORDER BY ',
          'glue' => ', ',
          'pieces' => array(
          )
        ),
        'parameters' => array(
          'prefix' => NULL,
          'glue' => NULL,
          'pieces' => array(
            $term->tid
          )
        )
      );

      // Only the 'pieces' are returned; the prefix and glue elements remain unchanged.
      $sql_settings = module_invoke($module, 'project_sort_methods', 'sql_settings', $sort_method);

      if (variable_get('project_browse_releases', 0)) {
        $release_settings = array(
          'fields' => array('pr.path', 'pr.version', 'MAX(pr.changed) AS changed', 'COUNT(*) AS release_count'),
          'joins' => array('INNER JOIN {project_releases} pr ON n.nid = pr.nid'),
          'wheres' => array('pr.status = 1', "pr.path <> ''"),
          'group_bys' => array('n.nid'),
          'parameters' => array($version)
        );
        if ($version != -1) {
          $release_settings['wheres'][] = "pr.version LIKE '%s%%'";
        }
        $sql_settings = array_merge_recursive($sql_settings, $release_settings);
      }

      // Merge in $sql_elements
      if (is_array($sql_settings)) {
        foreach(array_keys($sql_settings) as $key) {
          $sql_elements[$key]['pieces'] = array_merge($sql_elements[$key]['pieces'], $sql_settings[$key]);
          $sql_elements[$key]['pieces'] = array_unique($sql_elements[$key]['pieces']);
        }
      }

      $parameters = $sql_elements['parameters']['pieces'];

      $sql = project_build_query($sql_elements);

      $pager = module_invoke($module, 'project_sort_methods', 'pager', $sort_method);
      if ($pager) {
        $first_field = array_shift($sql_elements['fields']['pieces']);
        if (count($sql_elements['group_bys']['pieces'])) {
          $first_field = 'DISTINCT(' . $sql_elements['group_bys']['pieces'][0] . ')';
          $sql_elements['group_bys']['pieces'] = array();
        }
        $sql_elements['fields']['pieces'] = array("COUNT($first_field)");
        $count_query = project_build_query($sql_elements);
        $result = pager_query($sql, variable_get('project_browse_nodes', 30), 0, $count_query, $parameters);
      }
      else {
        $result = db_query($sql, $parameters);
      }

      // If we've just switched versions, we may have a term requested but no matching projects.
      // In that case, we returned an uncollapsed fieldset.
      if (module_invoke($module, 'project_sort_methods', 'set term', $sort_method)) {
        $output .= theme('fieldset', array('#title' => t('Categories'), '#collapsible' => TRUE, '#collapsed' =>  (arg(3) && db_num_rows($result)) ? TRUE : FALSE, '#children' => theme('project_term_list', $terms, "project/$termname/$sort_method")));
        if (!arg(3) || !db_num_rows($result)) {
          return $output;
        }
      }
    }
    // If taxonomy is enabled but no termname is selected, show a list of terms to choose from.
    else {
      $tree = taxonomy_get_tree($vid, 0, -1, 1);
      $items = array();
      foreach ($tree as $term) {
        $items[] = theme('project_type', $term);
      }
      drupal_set_breadcrumb($breadcrumb);
      drupal_set_title(t('Project types'));
      return theme('item_list', $items);
    }
  }
  // If taxonomy is not enabled, fetch all projects
  else {
    $result = db_query(db_rewrite_sql("SELECT n.nid, n.title, nr.teaser, nr.format, p.issues FROM {node} n INNER JOIN {node_revisions} nr ON n.vid = nr.vid INNER JOIN {project_projects} p ON n.nid = p.nid WHERE n.status = 1 ORDER BY n.title ASC"));
  }
  $class = 'even';
  while ($project = db_fetch_object($result)) {
    $project->body = check_markup($project->teaser, $project->format, FALSE);
    if (module_exist('taxonomy')) {
      $project->term = $termname;
      $project->terms = array();
      foreach (taxonomy_node_get_terms($project->nid) as $term) {
        if ($term->name != $termname) {
          $project->terms[] = l($term->name, project_term_path($term));
        }
      }
    }

    // Make sure we have the latest release
    if ($project->release_count > 1) {
      $latest = db_fetch_object(db_query_range("SELECT path, version FROM {project_releases} WHERE nid = %d AND version LIKE '%s%%' ORDER BY version DESC", $project->nid, $version, 0, 1));
      $project->path = $latest->path;
      $project->version = $latest->version;
    }

    $project->links = array();

    if ($project->path) {
      $project->links[] = '<a href="'. base_path() . $project->path .'">' . t('Download') . '</a>';
    }
    $project->links[] = l(t('Find out more'), "node/$project->nid");

    // This test doesn't currently work when taxonomy is enabled, since taxonomy_select_nodes doesn't load the issues setting from project_project
    if ($project->issues) {
      $project->links[] = l(t('Bugs and feature requests'), "project/issues/$project->nid");
    }
    if (module_invoke($module, 'project_sort_methods', 'group by date', $sort_method) && $date = _project_date($project->changed)) {
      $projects .= "<h3>$date</h3>";
    }
    $project->class = ($class == 'even') ? 'odd': 'even';
    $projects .= theme('project_summary', $project);
    $class = $project->class;
  }

  $output .= '<div class="project" id="project-overview">' . $projects . '</div>';

  if ($pager) {
    $output .= theme('pager', NULL, variable_get('project_browse_nodes', 30));
  }
  drupal_set_breadcrumb($breadcrumb);
  return $output;
}

function project_build_query($sql_elements) {
  foreach ($sql_elements as $key => $sql_element) {
    if ($key != 'parameters' && count($sql_element['pieces'])) {
      $sql .= $sql_element['prefix'] . implode($sql_element['glue'], $sql_element['pieces']);
    }
  }
  return db_rewrite_sql($sql);
}

function project_user($type, $edit, &$user, $category = NULL) {
  if ($type == 'view') {
    if ($projects = module_invoke('cvs', 'get_contributed_projects', $user->uid)) {
      return array(t('Projects') => $projects);
    }
  }
}

function project_page_user($arg = 0) {
  $current_user = FALSE;
  if ($arg) {
    $user = db_fetch_object(db_query("SELECT uid, name FROM {users} WHERE uid = %d OR name = '%s'", $arg, $arg));
    if ($user) {
      drupal_set_title(t('Projects by %user', array('%user' => $user->name)));
    }
  }

  if (!$user) {
    global $user;
    $current_user = TRUE;
  }

  if (!$user->uid) {
    return t('You need to log in to see your projects.');
  }

  $header = array(
    array('data' => t('Project'), 'field' => 'n.title', 'sort' => 'asc'),
    array('data' => t('Updated'), 'field' => 'n.changed'),
    array('data' => t('Issues'), 'colspan' => 4, 'field' => 'count')
  );

  $result = db_query(db_rewrite_sql("SELECT n.nid, n.title, n.changed, COUNT(p.nid) AS count FROM {node} n LEFT JOIN {project_issues} p ON n.nid = p.pid AND p.sid IN (1,2,8,13,14) WHERE n.type = 'project_project' AND n.status = 1 AND n.uid = %d GROUP BY n.nid, n.title, n.changed %s"), $user->uid, tablesort_sql($header));

  if (!db_num_rows($result)) {
    return ($current_user ? t('You have no projects.') : t('This user has no projects.'));
  }

  while ($node = db_fetch_object($result)) {
    $rows[] = array(
      l($node->title, "node/$node->nid"),
      array('data' => format_interval(time() - $node->changed, 2), 'align' => 'right'),
      array('data' => "$node->count open", 'align' => 'right'),
      l(t('view'), "project/issues/$node->nid"),
      l(t('search'), "project/issues/$node->nid/search"),
      l(t('submit'), "node/add/project_issue/$node->nid")
    );
    $query->projects[] = $node->nid;
  }

  $output = '<div class="project">'. theme('table', $header, $rows) .'</div>';
  $output .= l('#', "project/user/$user->name");

  $output .= theme('box', t('issues'), project_issue_query_result($query, 'html', false));

  return $output;
}

// Special project stuff
function project_types() {
  return array('project_project', 'project_issue');
}

function project_file_download($file) {
  if (user_access('access project issues')) {
    $file = file_create_path($file);
    if ($mime = db_result(db_query("SELECT file_mime FROM {project_issues} WHERE file_path = '%s'", $file))) {
      return array("Content-type: $mime");
    }
    if ($mime = db_result(db_query("SELECT file_mime FROM {project_comments} WHERE file_path = '%s'", $file))) {
      return array("Content-type: $mime");
    }
  }
}

/**
 * Provide settings data related to methods for sorting projects.
 *
 */
function project_project_sort_methods($op, $method = NULL) {
  switch ($op) {
    // A listing of the available sorting methods.
    // The array values are the name of the module (in this case, 'project').
    case 'methods':
      return array('category' => 'project', 'date' => 'project', 'name' => 'project');
    case 'sql_settings' :
      switch ($method) {
        case 'category':
          return array(
            'order_bys' => array('n.sticky DESC', 'n.title ASC')
          );
        case 'date':
          return array(
            'fields' => array('MAX(pr.changed) AS changed'),
            'joins' => array('INNER JOIN {project_releases} pr ON n.nid = pr.nid'),
            'group_bys' => array('n.nid'),
            'order_bys' => array('pr.changed DESC', 'n.sticky DESC', 'n.title ASC')
          );
        case 'name':
          return array(
            'order_bys' => array('n.title ASC', 'n.sticky DESC')
          );
        default:
          return;
      }
    // Does this method reset the $term variable, and output term information?
    case 'set term':
      switch ($method) {
        case 'category':
          return TRUE;
        default:
          return;
      }
    // Does this method page results?
    case 'pager':
      switch ($method) {
        case 'category':
        case 'date':
          return TRUE;
        case 'name':
          return FALSE;
      }
    // Does this method group results by date?
    case 'group by date':
      switch ($method) {
        case 'category':
          return FALSE;
        case 'date':
          return TRUE;
        case 'name':
          return FALSE;
        default:
          return;
      }
  }
  return;
}

function project_default_tid() {
  static $tid;
  if ($tid === NULL) {
    if (variable_get('project_release_overview', -1) != -1) {
      $tid = db_result(db_query("SELECT t.tid FROM {term_node} t INNER JOIN {project_releases} p ON t.nid = p.nid WHERE (p.version LIKE '%s%%')", $version));
    }
    else {
      $tid = db_result(db_query("SELECT t.tid FROM {term_node} t INNER JOIN {project_releases} p ON t.nid = p.nid"));
    }
  }
  return $tid;
}

/**
 * Helper function for grouping nodes by date.
 */
function _project_date($timestamp) {
  static $last;
  $date = format_date($timestamp, 'custom', 'F j, Y');
  if ($date != $last) {
    $last = $date;
    return $date;
  }
}

function project_projects_select_options($key_prefix = NULL) {
  $projects = array();
  if (module_exist('taxonomy')) {
    $vid = _project_get_vid();
    $result = db_query(db_rewrite_sql('SELECT p.nid, n.title, d.name FROM {project_projects} p INNER JOIN {node} n ON n.nid = p.nid LEFT JOIN {term_node} t ON t.nid = n.nid INNER JOIN {term_data} d ON t.tid = d.tid INNER JOIN {term_hierarchy} h ON t.tid = h.tid WHERE n.status = 1 AND p.issues = 1 AND d.vid = %d AND h.parent = 0 GROUP BY n.title ORDER BY d.weight, n.title', 'p'), $vid);
    while ($project = db_fetch_object($result)) {
      if (isset($project->name)) {
        if (!isset($projects[$project->name])) {
          $projects[$project->name] = array();
        }
        $projects[$project->name][$key_prefix . $project->nid] = $project->title;
      }
      else {
        $projects[$key_prefix . $project->nid] = $project->title;
      }
    }
  }
  else {
    $result = db_query(db_rewrite_sql('SELECT p.nid, n.title FROM {project_projects} p INNER JOIN {node} n ON n.nid = p.nid WHERE n.status = 1 AND p.issues = 1', 'p'));
    while ($project = db_fetch_object($result)) {
      $projects[$key_prefix . $project->nid] = $project->title;
    }
  }
  return $projects;
}

function project_version_filter_form($version) {

  $releases = array(-1 => t('<all>')) + project_releases_list();
  $form['rid'] = array(
    '#type' => 'select',
    '#default_value' => $version,
    '#options' => $releases
  );
  $form['submit'] = array(
    '#type' => 'button',
    '#value' => t('Go')
  );
  return $form;
}

function theme_project_version_filter_form($form) {
  $output = '<div class="container-inline">' . t('Filter by version:') . form_render($form) . '</div>';
  return $output;
}

function project_quick_navigate_form($projects) {
  $form = array();
  $form['project_goto'] = array(
    '#type' => 'select',
    '#default_value' => '0',
    '#options' => $projects
  );
  $form['destination'] = array(
    '#type' => 'hidden',
    '#value' => $_REQUEST['q']
  );
  $form['submit'] = array(
    '#type' => 'button',
    '#value' => t('Go')
  );
  $form['#action'] = url('project/goto');
  return $form;
}

// Themables

function theme_project_term_list($terms, $path) {
  $depth = 0;
  $output = "\n<ul class=\"project-terms\">\n";
  foreach ($terms as $term) {
    $link = l(t('%name (%count)', array('%name' => $term->name, '%count' => $term->count)), check_url("$path/$term->tid"));
    $output .= '<li class="leaf">' . $link . "</li>\n";
  }
  $output .= "\n</ul>\n";
  return $output;
}

/**
 * Theme a compact project view/summary.
 *
 * $project has the following fields:
 * - title: Title
 * - nid: Node id
 * - body: Filtered description
 * - term: String with the selected term name
 * - version: String with the version
 * - links: Array of links
 */
function theme_project_summary($project) {
  $output = '<div class="' . $project->class . '">';
  $output .= '<h2>'. l($project->title, "node/$project->nid") .'</h2>';
  if ($project->changed) {
    $output .= '<p><small>' . t('Last changed: %interval ago', array('%interval' => format_interval(time() - $project->changed, 2))) . '</small></p>';
  }
  $output .= $project->body;
  $output .= theme('links', $project->links);
  if ($project->terms) {
    $output .= '<br />' . theme('links', $project->terms);
  }
  $output .= '</div>';
  return $output;
}

/**
 * Theme a project type item.
 *
 */
function theme_project_type($term) {
  $link = l($term->name, check_url('project/'. $term->name));
  $output = "<div>$link</div>\n";
  if ($term->description) {
    $output .= '<p>' . filter_xss($term->description) . '</p>';
  }
  return $output;
}

/**
 * Returns a string of valid project names formatted to be suitable
 * for use with JS autocomplete fields. The user enters a
 * comma-separated list of project names. We only autocomplete the
 * last one. This code is stolen heavily from taxonomy_autocomplete().
 */
function project_autocomplete($string) {

  // This regexp allows the following types of user input:
  // this, "somecmpany, llc", "and ""this"" w,o.rks", foo bar
  $regexp = '%(?:^|,\ *)("(?>[^"]*)(?>""[^"]* )*"|(?: [^",]*))%x';
  preg_match_all($regexp, $string, $matches);
  $array = $matches[1];

  // Fetch last project
  $last_string = trim(array_pop($array));

  if ($last_string != '') {
    $result = db_query_range("SELECT n.title FROM {node} n INNER JOIN {project_projects} p ON n.nid = p.nid WHERE LOWER(n.title) LIKE LOWER('%%%s%%')", $last_string, 0, 10);
    $prefix = count($array) ? implode(', ', $array) .', ' : '';
    $matches = array();
    while ($project = db_fetch_object($result)) {
      $t = $project->title;
      $matches[$prefix . $t] = check_plain($project->title);
    }
    print drupal_to_js($matches);
    exit();
  }
}

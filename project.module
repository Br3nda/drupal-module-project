<?php
// $Id: project.module,v 1.101 2003/09/28 21:01:02 kjartan Exp $

// project nodes    -> project_projects
// project releases -> project_releases

// issue nodes      -> project_issues
// issue comments   -> project_comments

require_once "project.inc";
require_once "release.inc";
require_once "issue.inc";
require_once "comment.inc";
require_once "mail.inc";

function project_node($field) {
  $info["name"] = t("project");

  return $info[$field];
}

function project_head() {
  $style = "<style type=\"text/css\">\n@import url(modules/project/project.css);\n</style>";
  return $style;
}

function project_perm() {
  return array(
    "administer projects",
    "maintain projects",
    "access projects",
    "maintain project issues",
    "access project issues"
  );
}

function project_settings() {
  $output = form_textfield(t("Release directory"), "project_release_directory", variable_get("project_release_directory", ""), 50, 255, t("Leave this blank if project maintainers are to create their own release packages. This is useful if releases are generated by an external tool."));
  if (module_exist("mailhandler")) {
    // TODO: move this stuff to mailhandler.module ?
    $items = array(t("<none>"));
    $result = db_query("SELECT mail FROM {mailhandler} ORDER BY mail");
    while ($mail = db_result($result, $i++)) {
      $items[$mail] = $mail;
    }

    $output .= form_select(t("Reply-to address on e-mail notifications"), "project_reply_to", variable_get("project_reply_to", ""), $items);
  }

  /*
  $vocabularies = taxonomy_get_vocabularies("project");
  foreach ($vocabularies as $id => $vocabulary) {
    $vocabularies[$id] = $vocabulary->name;
  }
  if (count($vocabularies)) {
    $vocabularies[0] = t("<none>");
    asort($vocabularies);
    $output .= form_select(t("Release vocabulary"), "release_vocabulary", variable_get("release_vocabulary", 0), $vocabularies, t("If the release directory has some form or structure to it then assigning projects.."));
  }
  */

  return $output;
}

function project_cron() {
  if (variable_get("project_release_directory", "") && time() - variable_get("project_release_directory_last", 0) > variable_get("project_release_directory_interval", 24 * 60 * 60)) {
    variable_set("project_release_directory_last", time());
    project_release_cron();
  }

  if (time() - variable_get("project_digest_last", 0) > variable_get("project_digest_interval", 7 * 24 * 60 * 60)) {
    variable_set("project_digest_last", time());
    project_mail_digest();
  }

  if (time() - variable_get("project_reminder_last", 0) > variable_get("project_reminder_interval", 28 * 7 * 24 * 60 * 60)) {
    variable_set("project_reminder_last", time());
    project_mail_reminder();
  }
  
  $result = db_query("SELECT * FROM {project_issues} p LEFT JOIN {node} n USING (nid) WHERE p.state = 2 AND n.changed < %d", time() - 14 * 24 * 60 * 60);
  while ($node = db_fetch_object($result)) {
    foreach (array("nid", "pid", "category", "component", "priority", "assigned", "state", "title") as $var) {
      $comment->$var = $node->$var;
    }
    $comment->state = 7;
    $comment->body = t("Automatically closed due to inactivity (marked fixed for 14 days).");
    project_comment_save($comment);
  }
}

function project_link($type, $node = 0, $main = 0) {
  $links = array();
  switch ($type) {
    case "page":
      if (user_access("access projects")) {
        $links[] = l(t("projects"), "project", array("title" => t("View all projects.")));
      }
      break;
    case "node":
      if ($node->type == "project_project") {
        if (node_access("update", $node)) {
          $links[] = l(t("edit"), "node/edit/$node->nid");
        }
        if ($node->issues && user_access("access project issues")) {
          $links[] = l(t("issues"), "project/$node->uri/issues");
        }
        foreach (array("homepage" => t("homepage"), "changelog" => t("changelog"), "cvs" => t("cvs tree"), "demo" => t("demo site")) as $uri => $name) {
          if (!empty($node->$uri)) {
            $links[] = sprintf("<a href=\"%s\">%s</a>", $node->$uri, $name);
          }
        }
      }
      if ($node->type == "project_issue") {
        if (user_access("maintain project issues")) {
          $project = node_load(array("nid" => $node->pid, "type" => "project_project"));
          $links[] = l(t("add comment"), "project/$project->uri/comment/add/$node->nid");
          if ($node->fid) {
            $links[] = l(t("download attachment"), "project/$project->uri/issues/download/$node->nid");
          }
        }
      }
      break;
    case "system":
      if (user_access("maintain projects")) {
        menu("node/add/project_project", t("project"), "project_page", NULL, 0);
      }
      if (user_access("maintain project issues")) {
        $categories = project_issue_category(0, 0);
        foreach ($categories as $cat => $category) {
          menu("node/add/project_issue?category=$cat", $category, "project_page", NULL, 1);
        }
      }
      if (user_access("access project issues")) {
        global $user;
        menu("project/issues", t("view open issues"), "project_page", NULL, 0);
        if ($user->uid) {
          menu("project/issues/?users=$user->uid&states=1,2", t("my issues"), "project_page", NULL, 0);
        }
        $categories = project_issue_category(0, 1);
        foreach ($categories as $cat => $category) {
          menu("project/issues/?categories=$cat&states=1,2", $category, "project_page", NULL, 1);
        }
      }
      break;
  }

  return $links;
}

function project_page() {
  global $user;

  if (!user_access("access projects")) {
    drupal_goto(url());
  }

  switch (arg(1)) {
    case "test":
      project_release_cron();
      break;
    case "releases":
      project_release_overview();
      break;
    case "user":
      project_page_user();
      break;
    case "issues":
      $node->title = t("All issues");
      $node->uri = "issues";
      project_issue_page($node);
      break;
    default:
      if (is_numeric(arg(1))) {
        $node = node_load(array("nid" => arg(1), "type" => "project_project"));
      }
      else {
        $node = node_load(array("nid" => db_result(db_query("SELECT nid FROM {project_projects} WHERE uri = '%s'", arg(1)), 0), "type" => "project_project"));
      }

      if ($node->nid) { // Show project details
        if ($_POST["op"] == t("Subscribe")) {
          global $user;
          db_query("DELETE FROM {project_subscriptions} WHERE nid = %d AND uid = %d", $node->nid, $user->uid);
          db_query("INSERT INTO {project_subscriptions} (nid, uid, level) VALUES (%d, %d, %d)", $node->nid, $user->uid, $_POST["edit"]["level"]);
        }
        switch (arg(2)) {
          case "releases":
            project_release_page($node);
            break;
          case "issues":
            if ($node->issues && user_access("access project issues")) {
              project_issue_page($node);
              break;
            }
          case "comment":
            if ($node->issues && user_access("access project issues")) {
              project_comment_page($node);
              break;
            }
          default:
            theme("header", $node->title);
            node_view($node);
            theme("footer");
        }
      }
      else { // Show project overview
        project_page_overview();
      }
  }
}

function project_page_overview() {
  if (!is_numeric($_GET["tid"]) && count($vocabularies = taxonomy_get_vocabularies("project"))) { // Show an overview of vocabularies
    theme("header", t("Projects"));
    foreach ($vocabularies as $vocabulary) {
      $terms = taxonomy_get_tree($vocabulary->vid);

      $items = array();
      foreach ($terms as $term) {
        $items[] = l($term->name, "project", NULL, "tid=$term->tid") ." (". taxonomy_term_count_nodes($term->tid) .")";
      }

      theme("box", $vocabulary->name, theme("theme_item_list", $items));
    }
    print "<p>". l(t("Show all projects"), "project", NULL, "tid=0") ."<p>";
    if (variable_get("project_release_directory", "")) {
      print "<p>". l(t("Show downloads"), "project/releases") ."<p>";
    }
    theme("footer");
  }
  else {
    if (is_numeric($_GET["tid"]) && $_GET["tid"]) {
      $term = taxonomy_get_term($_GET["tid"]);
      $result = pager_query("SELECT DISTINCT(n.nid) FROM {node} n INNER JOIN {term_node} r ON n.nid = r.nid WHERE n.type = 'project_project' AND r.tid = $_GET[tid] AND n.status = 1 ORDER BY title", variable_get("default_nodes_main", 10));
    }
    else {
      $result = pager_query("SELECT nid FROM {node} WHERE status = 1 AND type = 'project_project' ORDER BY title", variable_get("default_nodes_main", 10));
    }

    $breadcrumb[] = l(t("Home"), NULL);
    $breadcrumb[] = l(t("Projects"), "project");
    if ($term) {
      $breadcrumb[] = $term->name;
    }

    theme("header", t("Projects"));
    theme("breadcrumb", $breadcrumb);
    while ($node = db_fetch_object($result)) {
      node_view(node_load($node), 1);
    }
    if ($pager = pager_display(NULL, variable_get("default_nodes_main", 10), 0, "default", array("tid" => $_GET["tid"]))) {
      print $pager;
    }

    theme("footer");
  }
}

function project_page_user() {
  global $user;

  switch ($_POST["op"] ? $_POST["op"] : arg(2)) {
    case t("Save"):
      foreach ($_POST["edit"] as $nid => $settings) {
        if (($project = node_load(array("nid" => $nid, "type" => "project_project")))) {
          db_query("DELETE FROM {project_subscriptions} WHERE nid = %d AND uid = %d", $nid, $user->uid);
          db_query("INSERT INTO {project_subscriptions} (nid, uid, level) VALUES (%d, %d, %d)", $nid, $user->uid, $settings["subscription"]);
        }
        $status = status(t("Settings saved"));
      }
    case "settings":
      $header = array(t("project"), t("issues notification"));
      $result = db_query("SELECT * FROM {project_subscriptions} WHERE uid = %d", $user->uid);
      while ($subscription = db_fetch_object($result)) {
        $subscriptions[$subscription->nid] = $subscription->level;
      }

      $result = db_query("SELECT nid, title FROM {node} WHERE status = 1 AND type = 'project_project' ORDER BY title");
      while ($project = db_fetch_object($result)) {
        $rows[] = array(
          $project->title,
          form_select("", "$project->nid][subscription", $subscriptions[$project->nid], array(0 => t("Don't notify when issues are submitted."), 1 =>t("Only notify on my submitted issues."), 2 => t("Notify me of all issues that are submitted.")))
        );
      }

      $output = table($header, $rows);
      $output .= form_submit(t("Save"));

      theme("header", t("User project settings"));
      print $status;
      theme("box", t("User project settings"), form($output));
      theme("footer");
      break;
    default:

      /*
      theme("header");
      $result = db_query("SELECT nid FROM {node} WHERE type = 'project_project' AND status = 1 ORDER BY title");
      while ($project = db_fetch_object($result)) {
        $project = node_load($project);
        $li = array();
        $li[] = l(t("Open issues assigned to %user", array("%user" => $user->name)), "project/$project->uri/issues/?assigned=$user->uid&states=1,2");
        $li[] = l(t("All issues assigned to %user", array("%user" => $user->name)), "project/$project->uri/issues/?assigned=$user->uid");
        $li[] = l(t("Open issues submitted by %user", array("%user" => $user->name)), "project/$project->uri/issues/?submitted=$user->uid&states=1,2");
        $li[] = l(t("All issues submitted by %user", array("%user" => $user->name)), "project/$project->uri/issues/?submitted=$user->uid");

        $output = "<ul><li>". implode("</li><li>", $li) ."</li></ul>";
        theme("box", l($project->title, "project/$project->uri"), $output);
      }
      theme("footer");
      */


      $_REQUEST["edit"]= array("states" => "1,2", "users" => $user->uid);
      $output = project_issue_query_result();

      theme("header");
      theme("box", l(t("Your issues"), "project/user/issues"), $output);
      theme("footer");
  }
}

function project_search($keys) {
  $find = do_search(array(
    "keys" => $keys,
    "type" => "node",
    "select" => "SELECT s.lno AS lno, n.title AS title, n.created AS created, u.uid AS uid, u.name AS name, s.count AS count FROM search_index s, node n LEFT JOIN users u ON n.uid = u.uid WHERE s.lno = n.nid AND s.type = 'recipe' AND n.status = 1 AND s.word like '%'")
  );

  return $find;
}

function project_update_index() {
  return array(
    "last_update" => "project_cron_index",
    "node_type" => "node",
    "select" => "SELECT nid as lno, body as text1 FROM {project_comments} WHERE 1 OR created > " . variable_get("project_cron_index", 1) . " OR changed > " . variable_get("project_cron_index", 1)
  );
}

// Special project stuff
function project_types() {
  return array("project_project", "project_issue");
}

function project_invoke(&$node, $function, $arg1 = 1, $arg2 = 0) {
  if (in_array($node->type, project_types())) {
    $function = "project_". $node->type ."_".$function;
    return $function($node, $arg1, $arg2);
  }
}

// Node functions
/*function project_node($field) {
  global $user;

  $info["name"] = t("project");
  $info["description"] = t("All and everything related to creating and maintaining projects.");

  return $info[$field];
}*/

function project_form(&$node, &$help, &$error, &$param) {
  // TODO: add type selector
  switch ($node->type) {
    case "project_project":
      $node->type = "project_project";
      return project_project_form($node, $help, $error, $param);
    default:
      $node->type = "project_issue";
      return project_issue_form($node, $help, $error, $param);
  }
}

function project_validate(&$node) {
  if (!in_array($node->type, project_types())) {
    return $error["type"] = "System error: invalid project type.";
  }
  return project_invoke($node, "validate");
}

function project_view($node, $main = 0) {
  return project_invoke($node, "view", $main);
}

function project_load($node) {
  return project_invoke($node, "load");
}

function project_insert($node) {
  return project_invoke($node, "insert");
}

function project_update($node) {
  return project_invoke($node, "update");
}

function project_delete($node) {
  return project_invoke($node, "delete");
}

function project_access($op, $node) {
  switch ($node->type) {
    case "project_project":
      return project_project_access($op, $node);
    case "project_issue":
      return project_issue_access($op, $node);
  }
}

?>
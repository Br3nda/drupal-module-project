<?php
// $Id: project.module,v 1.25 2002/06/14 10:58:04 kjartan Exp $

// Drupal hooks
function project_system($field) {
  $system["description"] = t("Enables a team to track outstanding items which need resolution.");
  return $system[$field];
}

function project_link($type, $node = 0, $main = 0) {
  if ($type == "node" && $node->type == "project") {
    if (user_access("post content")) {
      $links[] = lm(t("update $node->ptype"), array("mod" => "project", "op" => "update", "id" => $node->nid));
    }
    $links[] = t("project") .": ". lm($node->project_name, array("mod" => "project", "pid" => $node->pid));
  }

  if ($type == "page" && user_access("access projects")) {
    $links[] = lm(t("projects"), array("mod" => "project"));
  }

  if ($type == "menu.view" && user_access("access projects")) {
    global $user;
    if (db_num_rows(db_query("SELECT pid,name FROM projects WHERE developers = '%d' OR developers LIKE '%d,%%' OR developers LIKE '%%,%d,%%' OR developers LIKE '%%,%d'", $user->uid, $user->uid, $user->uid, $user->uid))) {
      $links[] = lm(t("view your projects"), array("mod" => "project", "op" => "user"));
    }
  }

  if ($type == "menu.create" && user_access("post content")) {
    $links[] = lm(t("create bug report"), array("mod" => "project", "op" => "add", "type" => "bug"));
    $links[] = lm(t("create feature request"), array("mod" => "project", "op" => "add", "type" => "feature"));
  }

  if ($type == "admin" && user_access("administer projects")) {
    $links[] = la(t("projects"), array("mod" => "project"));
  }

  return $links ? $links : array();
}

function project_perm() {
  return array("access projects", "administer projects");
}

function project_admin_form($edit = 0) {
  $form = form_textfield("Name", "name", $edit["name"], 60, 255);
  $form .= form_textarea("Versions", "versions", str_replace(",", "\n", $edit["versions"]), 20, 5);
  $form .= form_textfield("Default version", "version_default", $edit["version_default"], 20, 255);
  $form .= form_textfield("E-mail", "mail", $edit["mail"], 20, 255);
  $form .= form_textarea("Developers", "developers", str_replace(",", "\n", $edit["developers"]), 20, 5);
  $form .= form_textarea("Areas", "areas", str_replace(",", "\n", $edit["areas"] ? $edit["areas"] : "Code,Documentation,Miscellaneous,User interface"), 20, 5);
  if ($edit["pid"]) {
    $form .= form_hidden("pid", $edit["pid"]);
  }
  $form .= form_submit("Submit") . form_submit("Delete");

  return form($form);
}

function project_admin_list() {
  $result = db_query("SELECT pid,name,versions,version_default,developers,areas,mail FROM projects ORDER BY name");

  $output = "<table cellpadding=\"2\" cellspacing=\"2\" border=\"1\">\n";
  $output .= "<tr>";
  $output .= "<th>project</th>";
  $output .= "<th>versions</th>";
  $output .= "<th>default version</th>";
  $output .= "<th>mail</th>";
  $output .= "<th>developers</th>";
  $output .= "<th>areas</th>";
  $output .= "<th>operations</th>";
  $output .= "</tr>\n";
  while ($project = db_fetch_object($result)) {
    unset($developers);
    foreach (split(",", $project->developers) as $developer) {
      if ($user = user_load(array("uid" => trim($developer)))) {
        $developers[] = format_name($user);
      }
    }
    $output .= "<tr>";
    $output .= "<td>$project->name</td>";
    $output .= "<td>". str_replace(",", ", ", $project->versions) ."</td>";
    $output .= "<td>$project->version_default</td>";
    $output .= "<td>$project->mail</td>";
    $output .= "<td>". (count($developers) ? implode(", ", $developers) : t("None defined.")) ."</td>";
    $output .= "<td>". str_replace(",", ", ", $project->areas) ."</td>";
    $output .= "<td>". la(t("edit project"), array("mod" => "project", "op" => "edit", "pid" => $project->pid)) ."</td>";
    $output .= "</tr>\n";
  }
  $output .= "</table>\n";
  print $output;
}

function project_admin() {
  global $op;

  if (!user_access("administer projects")) {
    return;
  }

  $links[] = la(t("add project"), array("mod" => "project", "op" => "add"), t("Add a new project."));
  $links[] = la(t("overview"), array("mod" => "project"), t("View existing projects."));

  print "<small>". implode(" &middot; ", $links) ."</small><hr />";

  switch ($op) {
    case "add":
      print project_admin_form();
      break;
    case "edit":
      global $pid;
      $project = db_fetch_array(db_query("SELECT pid,name,versions,developers,areas,mail FROM projects WHERE pid = '%d'", $pid));
      $project["developers"] = @implode("\n", uid_to_name($project["developers"]));
      print project_admin_form($project);
      break;
    case "Delete":
      global $pid;
      db_query("DELETE FROM projects WHERE pid = '%d'", $pid);
      project_admin_list();
      break;
    case "Submit":
      global $edit;
      $edit["versions"] = strtr($edit["versions"], array("\r" => "", "\n" => ","));
      $edit["developers"] = strtr($edit["developers"], array("\r" => "", "\n" => ","));
      $edit["areas"] = strtr($edit["areas"], array("\r" => "", "\n" => ","));
      $ids = array();
      foreach (split(",", check_query($edit["developers"])) as $developer) {
        if ($user = user_load(array("name" => $developer))) {
          $ids[] = $user->uid;
        }
        else {
          print status(t("Unable to find developer: %s", array("%s" => $developer)));
        }
      }
      if ($edit["pid"]) {
        db_query("UPDATE projects SET name = '%s', versions = '%s', version_default = '%s', developers = '%s', areas = '%s', mail = '%s' WHERE pid = '%d'", $edit["name"], $edit["versions"], $edit["version_default"], implode(",", $ids), $edit["areas"], $edit["mail"], $edit["pid"]);
      }
      else {
        db_query("INSERT INTO projects (name, versions, version_default, developers, areas, mail) VALUES ('%s', '%s', '%s', '%s', '%s', '%s')", $edit["name"], $edit["versions"], $edit["version_default"], implode(",", $ids), $edit["areas"], $edit["mail"]);
      }
      project_admin_list();
      break;
    default:
      project_admin_list();
  }
}

function project_list_header($text, $pid, $type, $order) {
  global $op;
  return lm(t($text), array("mod" => "project", "pid" => $pid, "op" => $op, "type" => $type, "field" => $text, "order" => ($order == "asc" ? "desc" : "asc")));
}

function project_sort_submitted($a, $b) {
  global $order;
  return $order == "asc" ? strcasecmp($a->name, $b->name) : strcasecmp($b->name, $a->name);
}

function project_sort_assigned($a, $b) {
  global $order;
  return $order == "asc" ? strcasecmp($a->assigned_name, $b->assigned_name) : strcasecmp($b->assigned_name, $a->assigned_name);
}

function project_list($query, $pid = 0) {
  global $theme, $type, $order, $field;
  $headers = array("ID" => "n.nid", "Title" => "n.title", "Status" => "p.pstatus", "Last updated" => "n.changed", "Area" => "p.area", "Version" => "p.version", "Submitted by" => "n.uid", "Assigned" => "p.assigned");
  if ($pid) {
    $project = db_fetch_object(db_query("SELECT * FROM projects WHERE pid = '%d'", $pid));
    if (!$project->areas) {
      unset($headers["Area"]);
    }
    if (!$project->areas) {
      unset($headers["Area"]);
    }
    if (!$project->versions) {
      unset($headers["Version"]);
    }
    if (!$project->developers) {
      unset($headers["Assigned"]);
    }
  }
  $result = db_query("SELECT n.nid FROM node n LEFT JOIN project p ON n.nid = p.nid WHERE n.type = 'project' AND ". implode(" AND ", $query) ." ORDER BY ". ($headers[$field] ? $headers[$field] : "n.nid") ." ". ($order == "desc" ? "DESC" : "ASC"));

  if (db_num_rows($result)) {
    $output = "<table cellpadding=\"3\" cellspacing=\"2\" border=\"0\">\n";

    $output .= "<tr style=\"text-align: left\">";
    foreach ($headers as $text => $i) {
      $output .= "<th>". project_list_header($text, $pid, $type, $order) ."</th>";
    }
    $output .= "</tr>";

    while ($node = db_fetch_object($result)) {
      $node = node_load($node);
      if ($node->revisions) {
        $node->uid = $node->revisions[0][node]->uid;
        $node->name = $node->revisions[0][node]->name;
      }
      $nodes[] = $node;
    }

    if ($field == "n.uid") {
      usort($nodes, "project_sort_submitted");
    }
    if ($field == "p.assigned") {
      usort($nodes, "project_sort_assigned");
    }

    //$status = array(1 => "Active", "Fixed", "Duplicate", "Postponed", "Won't fix", "By design", "Closed");
    $colours = array(1 => "#ffffc0", "#c0ffc0", "#f6f6f6", "#f6f6f6", "#f6f6f6", "#f6f6f6", "#ffc0c0");

    foreach ($nodes as $node) {
      $node->name = substr($node->name, 0, strpos($node->name, "@"));
      $output .= "<tr style=\"background: ". $colours[$node->pstatus] ."\" valign=\"top\">";
      $output .= "<td>#$node->nid</td><td>". l($node->title, array("id" => $node->nid)) ."</td>";
      $output .= "<td>". str_replace(" ", "&nbsp;", t(project_pstatus($node->pstatus))) ."</td>";
      $output .= "<td>". format_date($node->changed, "custom", "Y-m-d H:i") ."</td>";
      if ($project->areas) {
        $output .= "<td>$node->area</td>";
      }
      if ($project->versions) {
        $output .= "<td>$node->version</td>";
      }
      $output .= "<td>". format_name($node) ."</td>";
      if ($project->developers) {
        $output .= "<td>". $node->assigned_formatted ."</td>";
      }
      $output .= (user_access("post content") ? "<td>". lm(t("update $node->ptype"), array("mod" => "project", "op" => "update", "id" => $node->nid)) ."</td>" : "");
      $output .= "</tr>\n";
    }

    $output .= "</table><br />\n";

    if (user_access("post content") && $type && $pid) {
      $links[] = lm(t("submit new $type"), array("mod" => "project", "op" => "add", "pid" => $pid, "type" => $type));
    }
    if (user_access("search content")) {
      $links[] = lm(t("search"), array("mod" => "project", "op" => "search", "pid" => $pid, "type" => $type));
    }
    $output .= $theme->links($links);
  }
  else {
    $output .= t("No matches found.");
  }

  return $output;
}

function project_page_filter($edit) {
  $filter = "<table><tr valign=\"bottom\">";
  if (!empty($edit["pid"])) {
    $result = db_query("SELECT * FROM projects WHERE pid ='%d'", $edit["pid"]);
    $project = db_fetch_object($result);
    $filter .= form_hidden("pid", $edit["pid"]);
  }
  else {
    $projects[0] = "All";
    $result = db_query("SELECT pid,name FROM projects");
    while ($project = db_fetch_object($result)) {
      $projects[$project->pid] = $project->name;
    }
    $filter .= "<td>". form_select(t("Project"), "pid", $edit["pid"], $projects) ."</td>";
  }

  $filter .= "<td>". form_select(t("Type"), "type", $edit["type"], array_merge(array(0 => t("All")), project_type())) ."</td>";
  if ($edit["pid"]) {
    if ($project->areas) {
      $filter .= "<td>". form_select(t("Area"), "area", $edit["area"], array(t("All")) + project_array($project->areas)) ."</td>";
    }
    if ($project->developers) {
      $filter .= "<td>". form_select(t("Assigned to"), "assigned", $edit["assigned"], array(-1 => t("All"), 0 => t("Unassigned")) + uid_to_name($project->developers)) ."</td>";
    }
  }
  else {
    $filter .= "<td>". form_textfield(t("Assigned to"), "assigned", $edit["assigned"], 30, 128) ."</td>";
  }
  $filter .= "<td>". form_textfield("Text", "text", $edit["text"], 30, 128) ."</td>";
  $filter .= "</tr></table>";
  $filter .= "<table><tr valign=\"bottom\">";
  //form_select(t("Status"), "status", $edit["status"], array_merge(array("All"), project_pstatus())) ."</td>";
  foreach (project_pstatus() as $id => $status) {
    $filter .= "<td>". form_checkbox(t($status), "status][$id]", $id, $edit["status"][$id]) ."</td>";
  }
  $filter .= "<td>". form_submit("Search") ."</td>";
  $filter .= "</tr></table>";
  $output = form(strtr($filter, array("<p>" => "", "</p>" => "")));

  return $output;
}

function project_page_filter_apply($edit) {
  $query[] = "n.type = 'project'";

  if ($edit["pid"]) {
    $query[] = "p.pid = '". check_input($edit["pid"]) ."'";
  }
  if ($edit["type"]) {
    $query[] = "p.ptype = '". check_input($edit["type"]) ."'";
  }
  if ($edit["status"]) {
    foreach ($edit["status"] as $id) {
      $status[] = "p.pstatus = '". check_input($id) ."'";
    }
    $query[] = "(". implode(" OR ", $status) .")";
  }
  if ($edit["area"]) {
    $query[] = "p.area = '". check_input($edit["area"]) ."'";
  }
  if ((int) $edit["assigned"] >= 0) {
    $query[] = "p.assigned = '". $edit["assigned"] ."'";
  }
  elseif ($edit["assigned"] && $account = user_load(array("name" => check_input($edit["assigned"])))) {
    $query[] = "p.assigned = '". $account->uid ."'";
  }
  if ($edit["text"]) {
    $query[] = "(n.title LIKE '% ". check_input($edit["text"]) ." %' OR n.body LIKE '% ". check_input($edit["text"]) ." %' OR n.revisions LIKE '% ". check_input($edit["text"]) ." %')";
  }

  $result = db_query("SELECT n.nid FROM node n LEFT JOIN project p ON n.nid = p.nid WHERE ". (count($query) ? implode(" AND ", $query) : "") ." ORDER BY n.nid");

  $output = project_list($query, $edit["pid"]);

  return $output;
}

function project_page() {
  global $op, $theme;

  switch ($op) {
    case "Search":
      global $edit;
      $theme->header(t("Project search results"));
      $theme->box(t("Search results"), project_page_filter_apply($edit));
      $theme->box(t("Search"), project_page_filter($edit));
      $theme->footer();
      break;
    case "search":
      global $pid, $type, $type;
      $theme->header(t("Project search"));
      $edit = array("pid" => $pid, "status" => array(1 => 1, 2), "assigned" => -1, "type" => $type);
      $theme->box(t("Search"), project_page_filter($edit));
      $theme->footer();
      break;
    case "user":
      global $pid, $type, $user;
      $result = db_query("SELECT pid,name FROM projects WHERE developers = '%d' OR developers LIKE '%d,%%' OR developers LIKE '%%,%d,%%' OR developers LIKE '%%,%d'", $user->uid, $user->uid, $user->uid, $user->uid);
      $theme->header(strtr("%u's projects", array("%u" => $user->name)));

      while ($project = db_fetch_object($result)) {
        if ($output = project_list(array("(p.pstatus = '1' OR p.pstatus = '2')", "p.pid = '$project->pid'", "p.assigned = '$user->uid'"))) {
          $theme->box($project->name, $output);
        }
      }

      $theme->footer();
      break;
    case "list":
      global $pid, $type, $user, $edit;
      $project = db_fetch_object(db_query("SELECT pid,name FROM projects WHERE pid = '%d'", $pid));

      $output = project_list(array("(p.pstatus = '1' OR p.pstatus = '2')", "p.pid = '$pid'", "p.ptype = '$type'"), $pid);

      $theme->header("$project->name ${type}s");
      $theme->box($project->name ." : ". t(($type ? $type : "all")), $output);
      if (!count($edit)) {
        $edit = array("pid" => $pid, "status" => array(1 => 1, 2), "assigned" => -1, "type" => $type);
      }
      $theme->box(t("Search"), project_page_filter($edit));
      $theme->footer();
      break;
    case "update":
      global $id, $user;
      if (user_access("post content")) {
        $node = node_load(array("nid" => $id));

        $theme->header("Updating:". $node->title);
        node_view($node, 0);

        // Clean up for follow up
        unset($node->body);
        unset($node->teaser);
        $node->revision = 1;
        $node->uid = $user->uid;
        $node->name = $user->name;
        $theme->box("$node->project_name : ". t($node->ptype), node_form($node));
      }
      else {
        $theme->header();
        print message_access();
      }
      $theme->footer();
      break;
    case "add":
      global $pid, $type, $user;
      $theme->header();
      if (user_access("post content")) {
        $node = array("uid" => $user->uid, "name" => $user->name, "type" => "project", "pid" => $pid, "ptype" => $type, "revision" => 1);
        $theme->box(t("Project") ." : ". t($type), node_form($node));
      }
      else {
        $theme->box(t("Access denied"), message_access());
      }
      $theme->footer();
      break;
    case "Preview":
      global $type, $edit;
      $theme->header();
      $theme->box(t("Project") ." : ". t($type), node_preview($edit));
      $theme->footer();
      break;
    case t("Submit"):
      global $edit;
      $theme->header();
      $edit["revision"] = 1;
      $theme->box(t("Project") ." : ". t($edit["ptype"]), node_submit($edit));
      $theme->footer();
      break;
    default:
      global $pid;
      $result = db_query("SELECT pid,name FROM projects ". ($pid ? "WHERE pid = '$pid'" : "") ."ORDER BY name");
      $theme->header();
      while ($project = db_fetch_object($result)) {
        $output = "<table cellpadding=\"2\" cellspacing=\"2\" border=\"0\">\n";
        foreach (project_type(2) as $type => $name) {
          $active = db_fetch_object(db_query("SELECT count(*) AS total FROM project WHERE (pstatus = '1' OR pstatus = '2') AND ptype = '$type' AND pid = '$project->pid'"));
          $total = db_fetch_object(db_query("SELECT count(*) AS total FROM project WHERE ptype = '$type' AND pid = '$project->pid'"));
          if (user_access("access content")) {
            $output .= "<tr><td><b>". lm(t($name), array("mod" => "project", "op" => "list", "pid" => $project->pid, "type" => $type)) ."</b></td><td>($total->total)</td>";
          }
          else {
            $output .= "<tr><td><b>". t($name) ."</b></td><td>($total->total)</td>";
          }
          if (user_access("post content")) {
            $output .= "<td>". lm(t("submit"), array("mod" => "project", "op" => "add", "pid" => $project->pid, "type" => $type)) ."</td>";
          }
          if (user_access("search content")) {
            $output .= "<td>". lm(t("search"), array("mod" => "project", "op" => "search", "pid" => $project->pid, "type" => $type)) ."</td>";
          }
          $output .= "<td>($active->total ". t("open") .")</td>";
        }
        $output .= "</table>\n";
        $theme->box($project->name, $output);
      }
      $theme->footer();
  }
}

function project_block() {
  $result = db_query("SELECT p.pid,p.name,n.ptype,count(n.nid) AS active FROM projects p LEFT JOIN project n ON p.pid = n.pid WHERE n.pstatus = '1' OR n.pstatus = '2' GROUP BY n.ptype, p.pid, p.name");
  while ($project = db_fetch_object($result)) {
    $projects[$project->name][pid] = $project->pid;
    $projects[$project->name][$project->ptype] = $project->active;
  }
  foreach ($projects as $name => $project) {
    $output .= lm($name, array("mod" => "project", "pid" => $project["pid"])) ."<br />";
    foreach ($project as $type => $active) {
      if ($type != "pid") {
        $output .= "&nbsp; ". lm(t(ucfirst($type . "s")), array("mod" => "project", "op" => "list", "pid" => $project["pid"], "type" => $type)) .": $active open<br />";
      }
    }
    $output .= "<br />";
  }

  $block[0]["subject"] = t("Project information");
  $block[0]["content"] = $output;
  $block[0]["info"] = t("Project information");
  $block[0]["link"] = "module.php?mod=project";
  return $block;
}

// Misc support functions
function uid_to_name($uids) {
  foreach (split(",", $uids) as $uid) {
    if ($user = user_load(array("uid" => $uid))) {
      $names[$user->uid] = $user->name;
    }
  }
  return $names ? $names : array();
}

function project_type($count = 1) {
  if ($count == 1) {
    return array("bug" => t("Bug"), "feature" => t("Feature"));
  }
  else {
    return array("bug" => t("Bugs"), "feature" => t("Features"));
  }
}

function project_pstatus($pstatus = 0) {
  $status = array(1 => "Active", "Fixed", "Duplicate", "Postponed", "Won't fix", "By design", "Closed");
  return $pstatus ? $status[$pstatus] : $status;
}

function project_array($values) {
  if (!is_array($values)) {
    $values = explode(",", $values);
  }

  foreach ($values as $value) {
    $return[$value] = $value;
  }

  return $return ? $return : array();
}

function project_mail(&$node, $new = 0) {
  global $user, $HTTP_HOST;
  
  if (!$project->mail) {
    return;
  }

  $project = db_fetch_object(db_query("SELECT pid,name,mail FROM projects WHERE pid = '$node->pid'"));
  $from = variable_get("site_mail", ini_get("sendmail_from"));

  $body = "ID: $node->nid\n";
  $body = "Project: $project->name\n";
  $body .= "Area: $node->area\n";
  $body .= "Version: $node->version\n";
  $body .= "Status: ". project_pstatus($node->pstatus) ."\n";
  $body .= "Priority: $node->priority\n";
  if ($node->assigned) {
    $body .= "Assigned to: ". @implode("", uid_to_name($node->assigned)) ."\n";
  }
  $body .= "\n";

  if ($new) {
    $body .= format_date(time(), "custom", "Y-m-d H:i") ." : ". ($node->name ? $node->name : $user->name) ."\n";
    $body .= check_output($node->body) ."\n\n";
    $body .= str_repeat("-", 72) ."\n\n";
    $mid = "Message-ID: <$node->nid@". str_replace("www.", "", request_uri()) .">";
  }
  else {
    $node->revisions = unserialize($node->revisions);
    $node->revisions[][node] = $node;
    $node->revisions = array_reverse($node->revisions);
    foreach ($node->revisions as $revision) {
      $body .= format_date($revision["node"]->changed, "custom", "Y-m-d H:i") ." : ". ($revision["node"]->uid ? implode("", uid_to_name($revision["node"]->uid)) : "") ."\n";
      $body .= check_output($revision["node"]->body) ."\n\n";
      $body .= str_repeat("-", 72) ."\n\n";
    }
    $mid = "Message-ID: <$node->nid.". count($node->revisions) ."@". str_replace("www.", "", request_uri()) .">\n";
    $mid .= "In-Reply-To: <$node->nid@". str_replace("www.", "", request_uri()) .">";
  }

  $body = wordwrap(strip_tags($body), 72);
  $body .= "View: ". path_uri() ."node.php?id=$node->nid\n";
  $body .= "Update: ". path_uri() ."module.php?mod=project&amp;op=update&amp;id=$node->nid";
  $trans = get_html_translation_table(HTML_ENTITIES);
  $trans = array_flip($trans);
  $body = strtr($body, $trans);
  user_mail($project->mail, check_output("$node->ptype #$node->nid : $node->title"), $body, 'From: "'. ($node->name ? $node->name : $user->name) ."\" <$from>\nReply-to: $from\nX-Mailer: Drupal\nReturn-path: <$from>\nErrors-to: $from\n$mid");
}

// Node support functions
function project_node($field) {
  global $user;

  $info["name"] = t("project");
  $info["description"] = t("Add information related to projects. This can be bug reports, feature requests, patches, etc.");

  return $info[$field];
}

function project_save($op, &$node) {

  if ($op == "approve") {
    return array("status" => 1);
  }

  if ($op == "create") {
    return array("created" => time(), "comment" => 0, "moderate" => 0, "promote" => 0, "status" => 1, "pid", "ptype", "pstatus", "area", "priority", "version", "assigned", "file");
  }

  if ($op == "decline") {
    return array("status" => 0);
  }

  if ($op == "update") {
    return array("changed" => time(), "comment" => 0, "moderate" => 0, "promote" => 0, "status" => 1, "revisions", "pid", "ptype", "pstatus", "area", "priority", "version", "assigned", "file");
  }

}

function project_access($op, $node) {
  if ($op == "view") {
    return $node->status;
  }

  if  ($op == "create") {
    return 1;
  }

  if ($op == "decline") {
    return array("status" => 0);
  }

  if ($op == "update") {
    return 1;
  }
}

function project_load(&$node) {
  $project = db_fetch_object(db_query("SELECT p.pid, p.ptype, p.pstatus, p.area, p.priority, p.version, p.assigned, p.file, projects.name AS project_name FROM project p LEFT JOIN projects ON p.pid = projects.pid WHERE nid = '$node->nid'"));
  $assigned = user_load(array("uid" => $project->assigned));
  $project->assigned_formatted = $project->assigned ? format_name($assigned) : t("Unassigned");
  $project->assigned_name = $assigned->name ? $assigned->name : t("Unassigned");
  return $project;
}

function project_insert(&$node) {
  db_query("INSERT INTO project (nid, pid, ptype, pstatus, area, priority, version, assigned, file) VALUES ('$node->nid', '$node->pid', '$node->ptype', '$node->pstatus', '$node->area', '$node->priority', '$node->version', '$node->assigned', '". base64_encode($node->file) ."')");
  project_mail($node, 1);
}

function project_update(&$node) {
  db_query("UPDATE project SET nid = '$node->nid', pid = '$node->pid', ptype = '$node->ptype', pstatus = '$node->pstatus', area = '$node->area', priority = '$node->priority', version = '$node->version', assigned = '$node->assigned', file = '". base64_encode($node->file) ."' WHERE nid = '$node->nid'");
  project_mail($node);
}

function project_delete(&$node) {
  db_query("DELETE FROM project WHERE nid = '$node->nid'");
}

function project_validate(&$node, &$error) {
  if ($node->pid) {
    $result = db_query("SELECT * FROM projects WHERE pid = '%d'", $node->pid);
    $project = db_fetch_object($result);
  }

  if ($node->priority) {
    if (!$node->pid) {
      $error["pid"] = "<div style=\"color: red;\">". t("Project not specified.") ."</div>";
    }
    if (!$node->type) {
      $error["type"] = "<div style=\"color: red;\">". t("Type not specified.") ."</div>";
    }
    if (!$node->area && $project->areas) {
      $error["area"] = "<div style=\"color: red;\">". t("Area not specified.") ."</div>";
    }
    if (!$node->version && $project->version) {
      $error["version"] = "<div style=\"color: red;\">". t("Version not specified.") ."</div>";
    }
  }
   
  return $node;
}

// Node output functions
function project_form(&$node, &$help, &$error, &$form) {
  global $user;

  // TODO: implement file uploads correctly
  // $form["options"] = 'enctype="multipart/form-data"';

  // Remove teaser, its not really used so let it be auto generated.
  unset($node->teaser);
  
  // Initialize project variables.
  $result = db_query("SELECT * FROM projects ORDER BY name");
  if (db_num_rows($result) != 1) {
    $projects = array(0 => "<none>");
    while ($p = db_fetch_object($result)) {
      $projects[$p->pid] = $p->name;
      if ($p->pid == $node->pid) {
        $project = $p;
      }
    }
  }
  else {
    $project = db_fetch_object($result);
    $node->pid = $project->pid;
  }

  // Deconstruct project details if available.
  if ($project->pid) {
    if ($project->developers) {
      $developers = array(0 => t("Unassigned")) + uid_to_name($project->developers);
    }
    if ($project->areas) {
      $areas = array(0 => t("Not specified")) + project_array($project->areas);
    }
    if ($project->versions) {
      $versions = array(0 => t("Not specified")) + project_array($project->versions);
    }
  }

  // Construct form.
  if (!is_array($projects)) {
    $output = form_hidden("pid", $node->pid);
  }
  else {
    $output = form_select(t("Project"), "pid", $node->pid, $projects, $error["pid"]);
  }
  $output .= form_select(t("Type"), "ptype", $node->ptype, project_type(), $error["ptype"]);
  if ($node->nid) {
    $output .= form_select(t("Status"), "pstatus", $node->pstatus, project_pstatus());
  }
  else {
    $output .= form_hidden("pstatus", 1);
  }
  if (function_exists("taxonomy_node_form")) {
    $output .= implode("", taxonomy_node_form("project", $node));
  }
  if ($areas) {
    $output .= form_select(t("Area"), "area", $node->area, $areas, $error["area"]);
  }
  $output .= form_select(t("Priority"), "priority", ($node->priority ? $node->priority : 4), array(1 => "1 - must fix", "2", "3", "4 - fix if time", "5", "6", "7 - don't fix"));
  if ($versions) {
    $output .= form_select(t("Version"), "version", $node->version ? $node->version : $project->version_default, $versions, $error["version"]);
  }
  if ($developers) {
    $output .= form_select(t("Assigned to"), "assigned", $node->assigned, $developers);
  }
  $output .= form_textarea(t("Content"), "body", ($node->state == "update" ? "" : $node->body), 60, 20, t("Allowed HTML tags") .": ". htmlspecialchars(variable_get("allowed_html", "")));
  //$output .= form_file(t("Attach file"), "file", 60, ($node->file ? t("Uploading a new file will remove the previously uploaded file") : ""));

  return $output;
}

function project_diff(&$a, &$b) {
  foreach ($b as $key => $value) {
    if ($a->$key !== $value) {
      $result->$key = array($a->$key, $b->$key);
    }
  }
  return $result;
}

function project_view($node, $main = 0) {
  global $theme;

  // Initialize project variables.
  $projects = array(0 => "<none>");
  $result = db_query("SELECT * FROM projects ORDER BY name");
  while ($p = db_fetch_object($result)) {
    $projects[$p->pid] = $p->name;
    if ($p->pid == $node->pid) {
      $project = $p;
    }
  }
  $types = project_type();

  if ($main) {
    $node->teaser = "<b>". t("Status") .":</b> ". t(project_pstatus($node->pstatus)) ." <b>". t("Area") .":</b> $node->area <b>". t("Priority") .":</b> $node->priority <b>". t("Version") .":</b> $node->version<br /><b>". t("Assigned") .":</b> $node->assigned_formatted<hr />". (count($node->revisions) ? $node->revisions[0][node]->teaser : $node->teaser);
  }
  else {
    if (count($node->revisions)) {
      $revisions = $node->revisions;
      unset($node->revisions);
      $revisions[]["node"] = $node;
      $node = $revisions[0]["node"];
    }
    $body .= "<b>". format_date($node->changed, "custom", "Y-m-d H:i") ." : ". format_name($node) ."</b>";
    $body .= "<blockquote>". $node->body ."</blockquote>";
    if (count($revisions) > 1) {
      $body .= '<hr /><table border="0" cellpadding="0" cellspacing="2">';
      for($i = 1; $i < count($revisions); $i++) {
        $diff = project_diff($revisions[$i - 1]["node"], $revisions[$i]["node"]);
        $body .= '<tr valign="top">';
        $body .= '<td><b>'. format_name($revisions[$i]["node"]) .'</b><br />';
        $body .= format_date($revisions[$i]["node"]->changed, "custom", "Y-m-d H:i");
        $body .= (count($diff->pid) ? "<br / ><b>". t("Project") ."</b>: ". $projects[$diff->pid[0]] ." -> ". $projects[$diff->pid[1]] : "");
        $body .= (count($diff->ptype) ? "<br / ><b>". t("Type") ."</b>: ". $types[$diff->ptype[0]] ." -> ". $types[$diff->ptype[1]] : "");
        $body .= (count($diff->pstatus) ? "<br / ><b>". t("Status") ."</b>: ". t(project_pstatus($diff->pstatus[0])) ." -> ". t(project_pstatus($diff->pstatus[1])) : "");
        $body .= (count($diff->assigned) ? "<br / ><b>". t("Assigned") ."</b>: ". $diff->assigned_formatted[0] ." -> ". $diff->assigned_formatted[1] : "");
        $body .= (count($diff->area) ? "<br / ><b>". t("Area") ."</b>: ". $diff->area[0] ." -> ". $diff->area[1] : "");
        $body .= (count($diff->version) ? "<br / ><b>". t("Version") ."</b>: ". $diff->version[0] ." -> ". $diff->version[1] : "");
        $body .= "</td>";
        $body .= "<td>". trim($revisions[$i]["node"]->body) ."</td>";
        $body .= '</tr>';
        $body .= '<tr><td><br /></td></tr>';
      }
      $body .= "</table>";

      $node = $revisions[$i - 1]["node"];
    }

    $node->body = "<b>". t("Status") .":</b> ". t(project_pstatus($node->pstatus)) ."<br /><b>". t("Area") .":</b> $node->area<br /><b>". t("Priority") .":</b> $node->priority <br /><b>". t("Version") .":</b> $node->version<br /><b>". t("Assigned") .":</b> $node->assigned_formatted<hr />$body";
  }

  if (count($node->revisions)) {
    $node->uid = $node->revisions[0][node]->uid;
    $node->name = $node->revisions[0][node]->name;
  }
  $theme->node($node, $main);
}

?>
<?php
// $Id: project_release.install,v 1.20 2009/01/12 20:07:19 dww Exp $

function project_release_install() {
  // Create the database tables.
  drupal_install_schema('project_release');

  // Make this module heavier than the default module weight.
  db_query("UPDATE {system} SET weight = %d WHERE name = 'project_release'", 2);
}

/**
 * Implementation of hook_uninstall().
 */
function project_release_uninstall() {
  // Drop database tables.
  drupal_uninstall_schema('project_release');
  
  $variables = array(
    'project_release_active_compatibility_tids',
    'project_release_api_vocabulary',
    'project_release_browse_versions',
    'project_release_default_version_format',
    'project_release_directory',
    'project_release_download_base',
    'project_release_overview',
    'project_release_unmoderate',
    'project_release_file_extensions',
  );
  foreach ($variables as $variable) {
    variable_del($variable);
  }
}

/**
 * Implementation of hook_schema().
 */
function project_release_schema() {
  $schema['project_release_nodes'] = array(
    'description' => t('The base table for project_project nodes.'),
    'fields' => array(
      'nid' => array(
        'description' => t('Primary Key: The {node}.nid of the project_release node.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'pid' => array(
        'description' => t('The {project_projects}.nid of the project_project node with which the project_release node is associated.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'version' => array(
        'description' => t('A string containing the full version of a release. The format of this string for a given project is dictated by {project_release_projects}.version_format.'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'tag' => array(
        'description' => t('The name of a CVS branch or tag on which a release is based.'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'file_path' => array(
        'description' => t('The path to the downloadable file for the release.'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'file_date' => array(
        'description' => t('A Unix timestamp indicating when the file was created.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'file_hash' => array(
        'description' => t('An MD5 hash of the file.'),
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'rebuild' => array(
        'description' => t('A flag indicating whether or not the file associated with a release should be rebuilt periodically. For official releases this should be 0, for development snapshots it should be 1.'),
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => FALSE,
        'not null' => FALSE,
        'default' => 0,
      ),
      'version_major' => array(
        'description' => t('The major version number of a release.'),
        'type' => 'int',
        'unsigned' => FALSE,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'version_minor' => array(
        'description' => t('The minor version number of a release.'),
        'type' => 'int',
        'unsigned' => FALSE,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'version_patch' => array(
        'description' => t('The patch level version number of a release.'),
        'type' => 'int',
        'unsigned' => FALSE,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'version_extra' => array(
        'description' => t('A text string that can be used to provide additional information about a release.  Ex: BETA'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => NULL,
      ),
    ),
    'primary key' => array('nid'),
    'indexes' => array(
      'project_releases_pid' => array('pid')
    ),
  );

  $schema['project_release_projects'] = array(
    'description' => t('Table used to store release specific information about projects.'),
    'fields' => array(
      'nid' => array(
        'description' => t('Primary Key: The {project_projects}.nid of the project_project node.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'releases' => array(
        'description' => t('A flag indicating whether or not releases are enabled for a project.'),
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => FALSE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'version_format' => array(
        'description' => t('A string used to designate the format of the {project_release_nodes}.version field for releases of a project.'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('nid'),
    'indexes' => array(
      'project_release_projects_releases' => array('releases')
    ),
  );

  $schema['project_release_supported_versions'] = array(
    'description' => t('Table used to store information about which major versions of a project are supported and/or recommended.'),
    'fields' => array(
      'nid' => array(
        'description' => t('Primary Key: The {project_projects}.nid of the project_project node.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'tid' => array(
        'description' => t('Primary Key: The {term_data}.tid of the API compatability version associated with a major version of a project.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'major' => array(
        'description' => t('Primary Key: The {project_release_nodes}.version_major of a release node.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'supported' => array(
        'description' => t('A flag to indicate whether or not a given major version of a project is supported.'),
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'recommended' => array(
        'description' => t('A flag to indicate whether or not a given major version of a project is recommended.'),
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'snapshot' => array(
        'description' => t('A flag to indicate whether or not snapshot releases of a major version of a project should be shown in the release download table.'),
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('nid', 'tid', 'major'),
  );

  $schema['project_release_package_errors'] = array(
    'description' => t('Table used to store error messages generated by the scripts that package project_release nodes into tarballs.'),
    'fields' => array(
      'nid' => array(
        'description' => t('Primary Key: The {node}.nid of the project_release node.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'messages' => array(
        'description' => t('The text of any error messages created by the packaging scripts.'),
        'type' => 'text',
        'not null' => FALSE,
      )
    ),
    'primary key' => array('nid'),
  );

  $schema['cache_project_release'] = array(
    'description' => t('Cache table used to store the project release download tables.'),
    'fields' => array(
      'cid' => array(
        'description' => t('Primary Key: Unique cache ID.'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'data' => array(
        'description' => t('A collection of data to cache.'),
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
      ),
      'expire' => array(
        'description' => t('A Unix timestamp indicating when the cache entry should expire, or 0 for never.'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => t('A Unix timestamp indicating when the cache entry was created.'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'headers' => array(
        'description' => t('Any custom HTTP headers to be added to cached data.'),
        'type' => 'text',
        'not null' => FALSE,
      ),
      'serialized' => array(
        'description' => t('A flag to indicate whether content is serialized (1) or not (0).'),
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0
      ),
    ),
    'primary key' => array('cid'),
    'indexes' => array(
      'expire' => array('expire')
    ),
  );
  return $schema;
}

/**
 * Add the 'serialized' field to the {cache_project_release} table.
 */
function project_release_update_6000() {
  $ret = array();
  $spec = array(
    'type' => 'int',
    'size' => 'small',
    'default' => 0,
    'not null' => TRUE,
  );
  db_add_field($ret, 'cache_project_release', 'serialized', $spec);
  return $ret;
}


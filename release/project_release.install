<?php
// $Id: project_release.install,v 1.16.2.3 2009/01/07 20:48:21 dww Exp $

function project_release_install() {
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      db_query("CREATE TABLE IF NOT EXISTS {project_release_nodes} (
          nid int unsigned NOT NULL default '0',
          pid int unsigned NOT NULL default '0',
          version varchar(255) NOT NULL default '',
          tag varchar(255) NOT NULL default '',
          file_path varchar(255) NOT NULL default '',
          file_date int unsigned NOT NULL default '0',
          file_hash varchar(32) NOT NULL default '',
          rebuild tinyint default '0',
          version_major int default NULL,
          version_minor int default NULL,
          version_patch int default NULL,
          version_extra varchar(255) default NULL,
          PRIMARY KEY (nid),
          KEY project_releases_pid (pid)
        ) /*!40100 DEFAULT CHARACTER SET utf8 */;");
      db_query("CREATE TABLE IF NOT EXISTS {project_release_projects} (
          nid int unsigned NOT NULL default '0',
          releases tinyint NOT NULL default '1',
          version_format varchar(255) NOT NULL default '',
          PRIMARY KEY (nid),
          KEY project_release_projects_releases (releases)
        ) /*!40100 DEFAULT CHARACTER SET utf8 */;");
      db_query("CREATE TABLE IF NOT EXISTS {project_release_supported_versions} (
          nid int unsigned NOT NULL default '0',
          tid int unsigned NOT NULL default '0',
          major int unsigned NOT NULL default '0',
          supported tinyint unsigned NOT NULL default '1',
          recommended tinyint unsigned NOT NULL default '0',
          snapshot tinyint unsigned NOT NULL default '0',
          PRIMARY KEY (nid, tid, major)
        ) /*!40100 DEFAULT CHARACTER SET utf8 */;");
      db_query("CREATE TABLE IF NOT EXISTS {project_release_package_errors} (
          nid int unsigned NOT NULL default '0',
          messages text,
          PRIMARY KEY (nid)
        ) /*!40100 DEFAULT CHARACTER SET utf8 */;");
      db_query("CREATE TABLE IF NOT EXISTS {cache_project_release} (
        cid varchar(255) BINARY NOT NULL default '',
        data longblob,
        expire int NOT NULL default '0',
        created int NOT NULL default '0',
        headers text,
        PRIMARY KEY (cid),
        INDEX expire (expire)
      ) /*!40100 DEFAULT CHARACTER SET UTF8 */ ");
      break;

    case 'pgsql':
      if (!db_table_exists('project_release_nodes')) {
        db_query("CREATE TABLE {project_release_nodes} (
            nid int NOT NULL default '0',
            pid int NOT NULL default '0',
            version varchar(255) NOT NULL default '',
            tag varchar(255) NOT NULL default '',
            file_path varchar(255) NOT NULL default '',
            file_date int NOT NULL default '0',
            file_hash varchar(32) NOT NULL default '',
            rebuild smallint default '0',
            version_major int default NULL,
            version_minor int default NULL,
            version_patch int default NULL,
            version_extra varchar(255) default NULL,
            PRIMARY KEY (nid)
          );");
        db_query("CREATE INDEX {project_release_nodes}_pid_idx ON {project_release_nodes} (pid)");
      }
      if (!db_table_exists('project_release_projects')) {
        db_query("CREATE TABLE {project_release_projects} (
            nid int NOT NULL default '0',
            releases smallint NOT NULL default '1',
            version_format varchar(255) NOT NULL default '',
            PRIMARY KEY (nid)
          );");
        db_query("CREATE INDEX {project_release_projects}_releases_idx ON {project_release_projects} (releases)");
      }
      if (!db_table_exists('project_release_supported_versions')) {
        db_query("CREATE TABLE {project_release_supported_versions} (
            nid int NOT NULL default '0',
            tid int NOT NULL default '0',
            major int NOT NULL default '0',
            supported smallint NOT NULL default '1',
            recommended smallint NOT NULL default '0',
            snapshot smallint NOT NULL default '0',
            PRIMARY KEY (nid, tid, major)
          );");
      }
      if (!db_table_exists('project_release_package_errors')) {
        db_query("CREATE TABLE {project_release_package_errors} (
          nid int NOT NULL default '0',
          messages text,
          PRIMARY KEY (nid)
        )");
      }
      if (!db_table_exists('cache_project_release')) {
        db_query("CREATE TABLE {cache_project_release} (
          cid varchar(255) NOT NULL default '',
          data bytea,
          expire int NOT NULL default '0',
          created int NOT NULL default '0',
          headers text,
          PRIMARY KEY (cid)
        )");
        db_query("CREATE INDEX {cache_project_release}_expire_idx ON {cache_project_release} (expire)");
      }
      break;
  }
  db_query("UPDATE {system} SET weight = 2 WHERE name = 'project_release'");
  db_query("DELETE FROM {variable} WHERE name = 'project_browse_releases'");
}

/**
 * Implementation of hook_uninstall().
 */
function project_release_uninstall() {
  $tables = array(
    'project_release_nodes',
    'project_release_projects',
    'project_release_default_versions',
    'cache_project_release',
  );
  foreach ($tables as $table) {
    if (db_table_exists($table)) {
      db_query("DROP TABLE {$table}");
    }
  }

  $variables = array(
    'project_release_active_compatibility_tids',
    'project_release_api_vocabulary',
    'project_release_browse_versions',
    'project_release_default_version_format',
    'project_release_directory',
    'project_release_download_base',
    'project_release_overview',
    'project_release_unmoderate',
    'project_release_file_extensions',
  );
  foreach ($variables as $variable) {
    variable_del($variable);
  }
}

/**
 * Adds the {project_release_default_versions} table for branch-aware
 * default versions and populates it the best it can.
 */
function project_release_update_1() {
  $ret = array();

  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $ret[] = update_sql(
        "CREATE TABLE IF NOT EXISTS {project_release_default_versions} (
          nid int unsigned NOT NULL default '0',
          tid int unsigned NOT NULL default '0',
          major int unsigned NOT NULL default '0',
          PRIMARY KEY (nid, tid)
        ) /*!40100 DEFAULT CHARACTER SET utf8 */;");
      break;
    case 'pgsql':
      if (!db_table_exists('project_release_default_versions')) {
        $ret[] = update_sql(
          "CREATE TABLE {project_release_default_versions} (
            nid int NOT NULL default '0',
            tid int NOT NULL default '0',
            major int NOT NULL default '0',
            PRIMARY KEY (nid, tid)
          );");
      }
      break;
  }

  // Initially populate based on the existing default release, if that
  // release is a real release with a valid compatibility taxonomy.
  $ret[] = update_sql("INSERT INTO {project_release_default_versions} (nid, tid, major) SELECT pp.nid, tn.tid, prn.version_major FROM {project_projects} pp INNER JOIN {project_release_nodes} prn ON pp.version = prn.nid INNER JOIN {term_node} tn ON tn.nid = prn.nid");

  // Now, add in values for any other distinct branches we know about
  // for each project, for all active compatibility terms.
  $tids = variable_get('project_release_active_compatibility_tids', '');
  if (!empty($tids)) {
    $where_tid = 'AND tn.tid IN (' . implode(',', array_filter($tids)) . ') ';
  }
  $ret[] = update_sql("INSERT INTO {project_release_default_versions} (nid, tid, major) SELECT prn.pid, tn.tid, MIN(prn.version_major) FROM {project_release_nodes} prn INNER JOIN {term_node} tn ON prn.nid = tn.nid LEFT JOIN {project_release_default_versions} prdv ON prdv.nid = prn.pid AND prdv.tid = tn.tid WHERE prn.version_major IS NOT NULL AND prdv.nid IS NULL AND prdv.tid IS NULL $where_tid GROUP BY prn.pid, tn.tid");

  return $ret;
}

/**
 * Add a new column to {project_release_projects} that determines if
 * the development snapshot table should be shown on project nodes.
 */
function project_release_update_2() {
  $ret = array();
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $ret[] = update_sql("ALTER TABLE {project_release_projects} ADD snapshot_table tinyint unsigned default '1' NOT NULL");
      break;
    case 'pgsql':
      db_add_column($ret, 'project_release_projects', 'snapshot_table', 'smallint', array('default' => 1, 'not null' => TRUE));
      break;
  }
  return $ret;
}

/**
 * Add a cache table {cache_project_release}.
 */
function project_release_update_5000() {
  $ret = array();
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $ret[] = update_sql("CREATE TABLE IF NOT EXISTS {cache_project_release} (
        cid varchar(255) BINARY NOT NULL default '',
        data longblob,
        expire int NOT NULL default '0',
        created int NOT NULL default '0',
        headers text,
        PRIMARY KEY (cid),
        INDEX expire (expire)
      ) /*!40100 DEFAULT CHARACTER SET UTF8 */ ");
      break;
    case 'pgsql':
      if (!db_table_exists('cache_project_release')) {
        $ret[] = update_sql("CREATE TABLE {cache_project_release} (
          cid varchar(255) NOT NULL default '',
          data bytea,
          expire int NOT NULL default '0',
          created int NOT NULL default '0',
          headers text,
          PRIMARY KEY (cid)
        )");
        $ret[] = update_sql("CREATE INDEX {cache_project_release}_expire_idx ON {cache_project_release} (expire)");
      }
      break;
  }
  return $ret;
}

/**
 * Remove variables from dead code for serving XML history files, which is
 * now handled by project-release-serve-history.php instead.
 */
function project_release_update_5001() {
  $ret = array();
  $variables = array(
    'project_release_history_xml',
    'project_release_history_directory',
  );
  foreach ($variables as $variable) {
    variable_del($variable);
    $ret[] = array('success' => TRUE, 'query' => "variable_del($variable)");
  }
  return $ret;
}

/**
 * Remove a dead variable from before project_release.module existed.
 */
function project_release_update_5002() {
  $ret = array();
  variable_del('project_release_unmoderate');
  $ret[] = array('success' => TRUE, 'query' => "variable_del('project_release_unmoderate')");
  return $ret;
}

/**
 * Add {project_release_package_errors} table to track packaging errors.
 */
function project_release_update_5003() {
  $ret = array();
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $ret[] = update_sql("CREATE TABLE IF NOT EXISTS {project_release_package_errors} (
          nid int unsigned NOT NULL default '0',
          messages text NOT NULL,
          PRIMARY KEY (nid)
        ) /*!40100 DEFAULT CHARACTER SET utf8 */;");
      break;
    case 'pgsql':
      if (!db_table_exists('project_release_package_errors')) {
        $ret[] = update_sql("CREATE TABLE {project_release_package_errors} (
          nid int NOT NULL default '0',
          messages text,
          PRIMARY KEY (nid)
        )");
      }
      break;
  }
  return $ret;
}

/**
 * Add the new {project_release_supported_versions} table, transfer data
 * from {project_release_default_versions} and {project_release_projects},
 * and drop the stale table and columns.
 */
function project_release_update_5200() {
  $ret = array();
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $ret[] = update_sql("CREATE TABLE IF NOT EXISTS {project_release_supported_versions} (
          nid int unsigned NOT NULL default '0',
          tid int unsigned NOT NULL default '0',
          major int unsigned NOT NULL default '0',
          supported tinyint unsigned NOT NULL default '1',
          recommended tinyint unsigned NOT NULL default '0',
          snapshot tinyint unsigned NOT NULL default '0',
          PRIMARY KEY (nid, tid, major)
        ) /*!40100 DEFAULT CHARACTER SET utf8 */;");
      break;
    case 'pgsql':
      if (!db_table_exists('project_release_supported_versions')) {
        $ret[] = update_sql("CREATE TABLE {project_release_supported_versions} (
            nid int NOT NULL default '0',
            tid int NOT NULL default '0',
            major int NOT NULL default '0',
            supported smallint NOT NULL default '1',
            recommended smallint NOT NULL default '0',
            snapshot smallint NOT NULL default '0',
            PRIMARY KEY (nid, tid, major)
          );");
      }
      break;
  }
  // Now, populate the table with the existing data. First, populate all the
  // recommended majors versions from {project_release_default_versions}.
  $ret[] = update_sql("INSERT INTO {project_release_supported_versions} (nid, tid, major, supported, recommended, snapshot) SELECT prdv.nid, prdv.tid, prdv.major, 1, 1, prp.snapshot_table FROM {project_release_default_versions} prdv INNER JOIN {project_release_projects} prp ON prdv.nid = prp.nid");

  // Now, fill in all the non-recommended versions. For the migration path, we
  // assume that if it's not recommended, it's also not supported. Project
  // maintainers will have to manually visit the new UI if they want to
  // specify multiple supported versions.
  $vid = _project_release_get_api_vid();
  $ret[] = update_sql("INSERT INTO {project_release_supported_versions} (nid, tid, major, supported, recommended, snapshot) SELECT DISTINCT prn.pid, tn.tid, prn.version_major, 0, 0, 0 FROM {project_release_nodes} prn INNER JOIN {term_node} tn ON prn.nid = tn.nid INNER JOIN {term_data} td ON tn.tid = td.tid INNER JOIN {node} n ON prn.nid = n.nid LEFT JOIN {project_release_default_versions} prdv ON prdv.nid = prn.pid AND prdv.tid = tn.tid AND prdv.major = prn.version_major WHERE n.status = 1 AND td.vid = $vid AND prn.version_major IS NOT NULL AND prdv.major IS NULL");

  return $ret;
}

/**
 * Drop the dead {project_release_default_versions} table and
 * snapshot_table column in {project_release_projects}.
 */
function project_release_update_5201() {
  $ret = array();
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $ret[] = update_sql('DROP TABLE IF EXISTS {project_release_default_versions}');
      if (db_fetch_object(db_query("SHOW COLUMNS FROM {project_release_projects} LIKE 'snapshot_table'"))) {
        $ret[] = update_sql('ALTER TABLE {project_release_projects} DROP COLUMN snapshot_table');
      }
      break;
    case 'pgsql':
      if (db_table_exists('{project_release_default_versions}')) {
        $ret[] = update_sql('DROP TABLE {project_release_default_versions}');
      }
      if (db_result(db_query("SELECT COUNT(pg_attribute.attname) FROM pg_class, pg_attribute WHERE pg_attribute.attrelid = pg_class.oid AND pg_class.relname = '{project_release_projects}' AND attname = 'snapshot_table'"))) {
        $ret[] = update_sql('ALTER TABLE {project_release_projects} DROP COLUMN snapshot_table');
      }
      break;
  }
  return $ret;
}

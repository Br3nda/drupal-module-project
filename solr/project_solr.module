<?php
// $Id: project_solr.module,v 1.33 2009/02/01 17:42:29 dww Exp $

//----------------------------------------
// Core hooks
//----------------------------------------

/**
 * Implementation of hook_menu().
 */
function project_solr_menu() {
  $items = array();
  $items['project'] = array(
    'title' => 'Project summary',
    'description' => '',
    'page callback' => 'project_solr_browse_summary_page',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['project/%'] = array(
    'title' => 'Project summary',
    'description' => '',
    'page callback' => 'project_solr_browse_page',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implementation of hook_theme().
 */
function project_solr_theme() {
  return array(
    'project_solr_no_count_facet_item' => array(
      'arguments' => array(
        'name' => NULL,
        'path' => '',
        'querystring' => '',
        'active' => FALSE,
        'unclick_link' => NULL,
        'num_found' => NULL,
        'project' => NULL,
        'project_terms' => '',
        'download_table' => '',
      ),
    ),
  );
}

//----------------------------------------
// Solr-related hooks
//----------------------------------------

/**
 * Implementation of hook_apachesolr_update_index().
 *
 * This adds information about releases for the project to the Solr document
 * so we can facet on releases (API compatibility terms, etc).
 */
function project_solr_apachesolr_update_index(&$document, $node) {
  if (module_exists('project_release') && !empty($node->project_release['releases'])) {
    $document->isfield_project_has_releases = 1;

    $max_filetime = 0;
    $query = db_query("SELECT DISTINCT(tn.tid) FROM {node} n INNER JOIN {project_release_nodes} prn ON n.nid = prn.nid INNER JOIN {term_node} tn ON n.nid = tn.nid INNER JOIN {term_data} td ON tn.tid = td.tid WHERE prn.pid = %d AND td.vid = %d", $node->nid, _project_release_get_api_vid());
    while ($term = db_fetch_object($query)) {
      $document->setMultiValue('imfield_project_release_api_terms', $term->tid);
      $key = 'isfield_project_latest_release_timestamp_'. $term->tid;
      $filetime = db_result(db_query_range("SELECT f.timestamp FROM {project_release_nodes} prn INNER JOIN {project_release_file} prf ON prn.nid = prf.nid INNER JOIN {term_node} tn ON prn.nid = tn.nid INNER JOIN {files} f ON prf.fid = f.fid WHERE tn.tid = %d AND prn.pid = %d ORDER BY f.timestamp DESC", $term->tid, $node->nid, 0, 1));
      $document->$key = $filetime;
      if ($filetime > $max_filetime) {
        $max_filetime = $filetime;
      }
    }
    $document->isfield_project_latest_release_timestamp = $max_filetime;
    
    if (module_exists('project_usage')) {
      $weeks = variable_get('project_usage_active_weeks', array());
      $week = reset($weeks);
      $total_usage = 0;
      $query = db_query("SELECT * FROM {project_usage_week_projects} WHERE nid = %d AND timestamp = %d", $node->nid, $week);
      while ($usage = db_fetch_object($query)) {
        $key = 'isfield_project_release_api_usage_'. $usage->tid;
        $document->$key = $usage->count;
        $total_usage += $usage->count;
      }
      $document->isfield_project_release_total_usage = $total_usage;
    }
  }
}

//----------------------------------------
// Page callbacks
//----------------------------------------

/**
 * Summary project browsing page.
 */
function project_solr_browse_summary_page() {
  $vid = _project_get_vid();
  $tree = taxonomy_get_tree($vid, 0, -1, 1);
  $items = array();
  foreach ($tree as $term) {
    $items[] = theme('project_type', $term);
  }
  drupal_set_title(t('Project types'));
  return theme('item_list', $items);
}

function project_solr_browse_page($term_name) {
  $output = '';
  $vid = _project_get_vid();

  $parent_term = db_fetch_object(db_query("SELECT t.tid, t.name, t.description FROM {term_data} t WHERE LOWER(t.name) = LOWER('%s')", $term_name));

  if (!$parent_term) {
    // XXX: this is the Drupal 5 way...
    return drupal_not_found();
  }
  drupal_set_title(check_plain($parent_term->name));
  if (!empty($parent_term->description)) {
    $output .= theme('project_type_description', $parent_term);
  }

  $text_query = !empty($_GET['text']) ? $_GET['text'] : '';

  include_once drupal_get_path('module', 'apachesolr') .'/Solr_Base_Query.php';
  include_once drupal_get_path('module', 'project_solr') .'/project-solr-query.php';
  $query = new Project_Solr_Query(apachesolr_get_solr(), "type:project_project tid:{$parent_term->tid} " . $text_query, !empty($_GET['filters']) ? $_GET['filters'] : FALSE, isset($_GET['solrsort']) ? check_plain($_GET['solrsort']) : 'stitle asc');
  $query->text_query = $text_query;

  // Rewrite core compatibility filters.
  if (module_exists('project_release')) {
    $compatibility_filters = array();
    foreach ($query->get_fields() as $field) {
      if ($field['#name'] == 'core') {
        if ($tid = db_result(db_query("SELECT t.tid FROM {term_data} t WHERE t.vid = %d AND LOWER(t.name) = LOWER('%s')", _project_release_get_api_vid(), $field['#value']))) {
          $query->add_field('imfield_project_release_api_terms', $tid);
        }
        $compatibility_filters[] = $field['#value'];
      }
    }
    $query->remove_field('core');
  }

  $params = array(
    'fl' => 'id,nid,title,body,format,comment_count,type,created,changed,score,url,uid,name',
    'rows' => variable_get('apachesolr_rows', 10),
    'facet' => 'true',
    'facet.mincount' => 1,
    'facet.sort' => 'true',
    'facet.field' => array(
      'imfield_vid_'. _project_get_vid(),
      'imfield_project_release_api_terms',
    ),
    'facet.limit' => 200,
    'qt' => 'standard',
  );

  $sort = isset($_GET['solrsort']) ? check_plain($_GET['solrsort']) : '';

  // Validate sort parameter
  if (isset($sort) && preg_match('/^([a-z0-9_]+ (asc|desc)(,)?)+$/i', $sort)) {
    $params['sort'] = $sort;
  }

  $page = isset($_GET['page']) ? $_GET['page'] : 0;
  $params['start'] = $page * $params['rows'];
  // This is the object that does the communication with the solr server.
  $solr = apachesolr_get_solr();

  // This hook allows modules to modify the query and params objects.
  apachesolr_modify_query($query, $params, 'apachesolr_search');
  if (!$query) {
    return array();
  }

  $response = $solr->search($query->get_query_basic(), $params['start'], $params['rows'], $params);
  // The response is cached so that it is accessible to the blocks and anything
  // else that needs it beyond the initial search.
  $total = $response->response->numFound;

  // Rewrite core compatibility filters (this is ugly).
  if (module_exists('project_release')) {
    foreach ($compatibility_filters as $filter) {
      $query->add_field('core', $filter);
    }
    $query->remove_field('imfield_project_release_api_terms');
  }

  project_solr_response_cache(array($query, $response, $parent_term));

  // Set breadcrumb
  $breadcrumb = menu_get_active_breadcrumb();
  drupal_set_breadcrumb($breadcrumb);

  $output .= '<div id="project-overview">';
  pager_query("SELECT %d", $params['rows'], 0, NULL, $total);
  if ($total > 0) {
    foreach ($response->response->docs as $doc) {
      $doc->created = strtotime($doc->created);
      $doc->changed = strtotime($doc->changed);
      $output .= project_solr_render_search_result($doc);
    }
  }
  else {
    $output .= t('No projects found in this category.');
  }

  $output .= '</div>'; // id="project-overview"
  $output .= theme('pager', NULL, $params['rows'], 0);

  return $output;
}

function project_solr_response_cache($set = FALSE) {
  static $cache = NULL;
  if ($set !== FALSE) {
    $cache = $set;
  }
  return $cache;
}

//----------------------------------------
// Blocks
//----------------------------------------

/**
 * Implementation of hook_block().
 */
function project_solr_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    return array(
      'project_solr_categories' => array(
        'info' => t('Project: categories'),
        'cache' => BLOCK_CACHE_PER_PAGE,
      ),
      'project_solr_order' => array(
        'info' => t('Project: ordering'),
        'cache' => BLOCK_CACHE_PER_PAGE,
      ),
      'project_solr_compability' => array(
        'info' => t('Project: core compatibility'),
        'cache' => BLOCK_CACHE_PER_PAGE,
      ),
      'project_solr_text' => array(
        'info' => t('Project: text search'),
        'cache' => BLOCK_CACHE_PER_PAGE,
      ),
    );
  }

  if ($op == 'view' && ($search = project_solr_response_cache())) {
    list($query, $response, $parent_term) = $search;

    if ($delta == 'project_solr_categories') {
      $facet = 'imfield_vid_'.  _project_get_vid();
      $terms = array();

      // Get the terms at the current depth.
      $current_tid = $parent_term->tid;
      foreach ($query->get_fields() as $field) {
        if ($field['#name'] == 'tid') {
          $current_tid = $field['#value'];
          break;
        }
      }
      $current_level_terms = array();
      $tree = taxonomy_get_tree(_project_get_vid(), $current_tid, -1, 1);
      foreach ($tree as $term) {
        $current_level_terms[$term->tid] = $term;
      }

      foreach ($response->facet_counts->facet_fields->$facet as $tid => $count) {
        $active = $query->has_field('tid', $tid);
        if (!isset($current_level_terms[$tid]) && (!$active || $tid != $current_tid)) {
          continue;
        }
        $unclick_link = '';
        $term = taxonomy_get_term($tid);
        $new_query = clone $query;
        
        $path = 'project/' . drupal_strtolower($parent_term->name);
        if ($active) {
          $new_query->remove_field('tid', $term->tid);
          $querystring = $new_query->get_url_querystring();
          $unclick_link = theme('apachesolr_unclick_link', $path, $querystring);
        }
        else {
          $new_query->add_field('tid', $term->tid);
          $querystring = $new_query->get_url_querystring();
        }
        $countsort = $count == 0 ? '' : 1 / $count;
        // if numdocs == 1 and !active, don't add.
        if ($response->numFound == 1 && !$active) {
          // skip
        }
        else {
          $terms[$active ? $countsort . $term->name : 1 + $countsort . $term->name] = theme('apachesolr_facet_item', $term->name, $count, $path, $querystring, $active, $unclick_link, $response->numFound);
        }
      }
      $vocab = taxonomy_vocabulary_load(_project_get_vid());

      if (!empty($terms)) {
        ksort($terms);

        // The currently selected term should be first.
        if (isset($terms[$current_tid])) {
          $current_term = $terms[$current_tid];
          unset($terms[$current_tid]);
          $terms = array_merge(array($current_tid => $current_term), $terms);
        }

        return array(
          'subject' => $vocab->name,
          'content' => theme('apachesolr_facet_list', $terms, 200),
        );
      }
      return;
    }
    else if ($delta == 'project_solr_order') {
      $sorts = array(
        'stitle' => array('name' => t('Title'), 'default' => 'asc'),
        'name' => array('name' => t('Author'), 'default' => 'asc'),
        'created' => array('name' => t('Date'), 'default' => 'desc'),
      );

      $solrsorts = array();
      $sort_parameter = isset($_GET['solrsort']) ? check_plain($_GET['solrsort']) : FALSE;
      foreach (explode(',', $sort_parameter) as $solrsort) {
        $parts = explode(' ', $solrsort);
        if (!empty($parts[0]) && !empty($parts[1])) {
          $solrsorts[$parts[0]] = $parts[1];
        }
      }

      if (empty($solrsorts)) {
        $solrsorts = array(
          'stitle' => 'asc',
        );
      }

      $sort_links = array();
      $path = 'project/' . drupal_strtolower($parent_term->name);
      $new_query = clone $query;
      foreach ($sorts as $type => $sort) {
        $new_sort = isset($solrsorts[$type]) ? $solrsorts[$type] == 'asc' ? 'desc' : 'asc' : $sort['default'];
        $new_query->set_solrsort($type == "relevancy" ? '' : "{$type} {$new_sort}");
        $active = isset($solrsorts[$type]) || ($type == "stitle" && !$solrsorts);
        $direction = isset($solrsorts[$type]) ? $solrsorts[$type] : '';
        $sort_links[] = theme('apachesolr_sort_link', $sort['name'], $path, $new_query->get_url_querystring(), $active, $direction);
      }
      return array(
        'subject' => t('Sort by'),
        'content' => theme('apachesolr_sort_list', $sort_links),
      );
    }
    else if (module_exists('project_release') && $delta == 'project_solr_compability') {
      $vid = _project_release_get_api_vid();
      $facet = 'imfield_project_release_api_terms';
      $terms = array();

      foreach ($response->facet_counts->facet_fields->$facet as $tid => $count) {
        $term = taxonomy_get_term($tid);

        $active = $query->has_field('core', $term->name);

        $new_query = clone $query;
        $new_query->remove_field('core');
        $new_query->add_field('core', $term->name);

        $path = 'project/' . drupal_strtolower($parent_term->name);
        $querystring = $new_query->get_url_querystring();

        $unclick_link = $active ? theme('apachesolr_unclick_link', $path, $querystring) : '';

        $countsort = $count == 0 ? '' : 1 / $count;
        // if numdocs == 1 and !active, don't add.
        if ($response->numFound == 1 && !$active) {
          // skip
        }
        else {
          $terms[$active ? $countsort . $term->name : 1 + $countsort . $term->name] = theme('project_solr_no_count_facet_item', $term->name, $path, $querystring, $active, $unclick_link, $response->numFound);
        }
      }
      $vocab = taxonomy_vocabulary_load(_project_get_vid());

      if (!empty($terms)) {
        ksort($terms);
        return array(
          'subject' => t('Filter by compatibility'),
          'content' => theme('apachesolr_facet_list', $terms, 200),
        );
      }
      return;
    }
    else if ($delta == 'project_solr_text') {
      return array(
        'subject' => t('Search @project_type', array('@project_type' => drupal_strtolower($parent_term->name))),
        'content' => drupal_get_form('project_sort_freetext'),
      );
    }
  }
}

/**
 * Form callback; display a free text form.
 */
function project_sort_freetext() {
  list($query, $response, $parent_term) = project_solr_response_cache();

  $form = array();
  $form['text'] = array(
    '#type' => 'textfield',
    '#default_value' => $query->text_query,
    '#size' => 20,
  );
  $form['path'] = array(
    '#type' => 'value',
    '#value' => 'project/' . drupal_strtolower($parent_term->name),
  );
  $form['querystring'] = array(
    '#type' => 'value',
    '#value' => $query->get_url_querystring(),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}

/**
 * Submit handler for project_sort_freetext().
 */
function project_sort_freetext_submit($form, &$form_state) {
  $form_state['values']['querystring'] .= (!empty($form_state['values']['querystring']) ? '&' : '') . 'text=' . $form_state['values']['text'];
  $form_state['redirect'] = array($form_state['values']['path'], $form_state['values']['querystring']);
}

//----------------------------------------
// Theme-related functions
//----------------------------------------

/**
 * Perform the business logic to 
 */
function project_solr_render_search_result($result) {
  $project = node_load($result->nid);
  $project = node_build_content($project, TRUE, FALSE);
  $project->body = $project->teaser;

  if (!empty($project->project_release['releases'])) {
    $project->download_table = project_release_table($project, 'recommended', 'all', t('Version'), FALSE, FALSE);
  }
  
/*
  $vid = _project_get_vid();
  $tree = taxonomy_get_tree($vid, 0, -1, 1);
  $project_terms = '';
  if (!empty($project->taxonomy)) {
    $terms = array();
    foreach ($project->taxonomy as $tid => $term) {
      
    }
  }
*/
  $project->links = array();
  $project->links['read_more'] = array(
    'title' => t('Find out more'),
    'href' => "node/$project->nid",
  );
  if (!empty($project->project_issue['issues'])) {
    $project->links['issues'] = array(
      'title' => t('Bugs and feature requests'),
      'href' => 'project/issues/'. $project->project['uri'],
    );
  }
  return theme('project_summary', $project);
}

function theme_project_solr_no_count_facet_item($name, $path, $querystring = '', $active = FALSE, $unclick_link = NULL, $num_found = NULL) {
  $attributes = array();
  if ($active) {
    $attributes['class'] = 'active';
  }
  if ($unclick_link) {
    return $unclick_link . ' '. check_plain($name);
  }
  else {
    return apachesolr_l($name,  $path, array('attributes' => $attributes, 'query' => $querystring));
  }
}


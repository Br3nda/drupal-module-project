<?php
// $Id: project_solr.module,v 1.12 2009/01/30 17:54:52 dww Exp $

//----------------------------------------
// Core hooks
//----------------------------------------

/**
 * Implementation of hook_menu().
 */
function project_solr_menu() {
  $items = array();
  $items['project'] = array(
    'title' => 'Project summary',
    'description' => '',
    'page callback' => 'project_solr_browse_summary_page',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['project/%'] = array(
    'title' => 'Project summary',
    'description' => '',
    'page callback' => 'project_solr_browse_page',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implementation of hook_theme().
 */
function project_solr_theme() {
  return array(
    'project_solr_result' => array(
      'arguments' => array(
        'project' => NULL,
        'project_terms' => '',
        'download_table' => '',
      ),
    ),
  );
}

//----------------------------------------
// Solr-related hooks
//----------------------------------------

/**
 * Implementation of hook_apachesolr_update_index().
 *
 * This adds information about releases for the project to the Solr document
 * so we can facet on releases (API compatibility terms, etc).
 */
function project_solr_apachesolr_update_index(&$document, $node) {
  if (module_exists('project_release') && $node->project_release['releases']) {
    $document->isfield_project_has_releases = 1;

    $query = db_query("SELECT DISTINCT(tn.tid) FROM {node} n INNER JOIN {project_release_nodes} prn ON n.nid = prn.nid INNER JOIN {term_node} tn ON n.nid = tn.nid INNER JOIN {term_data} td ON tn.tid = td.tid WHERE prn.pid = %d AND td.vid = %d", $node->nid, _project_release_get_api_vid());
    while ($term = db_fetch_object($query)) {
      $document->setMultiValue('imfield_project_release_api_terms', $term->tid);
    }
    if (module_exists('project_usage')) {
      $weeks = variable_get('project_usage_active_weeks', array());
      $week = reset($weeks);
      $total_usage = 0;
      $query = db_query_range("SELECT * FROM {project_usage_week_projects} WHERE nid = %d AND timestamp = %d", $node->nid, $week);
      while ($usage = db_fetch_object($query)) {
        $key = 'isfield_project_release_api_usage_'. $usage->tid;
        $document->$key = $usage->count;
        $total_usage += $usage->count;
      }
      $document->isfield_project_release_total_usage = $total_usage;
    }
  }
}

//----------------------------------------
// Page callbacks
//----------------------------------------

/**
 * Summary project browsing page.
 */
function project_solr_browse_summary_page() {
  $vid = _project_get_vid();
  $tree = taxonomy_get_tree($vid, 0, -1, 1);
  $items = array();
  foreach ($tree as $term) {
    $items[] = theme('project_type', $term);
  }
  drupal_set_title(t('Project types'));
  return theme('item_list', $items);
}

function project_solr_browse_page($term_name) {
  $vid = _project_get_vid();

  $parent_term = db_fetch_object(db_query("SELECT t.tid, t.name FROM {term_data} t WHERE LOWER(t.name) = LOWER('%s')", $term_name));

  if (!$parent_term) {
    // XXX: this is the Drupal 5 way...
    drupal_not_found();
  }
  drupal_set_title($parent_term->name);

  $query = apachesolr_drupal_query("type:project_project tid:{$parent_term->tid}", !empty($_GET['filters']) ? $_GET['filters'] : '');

  $params = array(
    'fl' => 'id,nid,title,body,format,comment_count,type,created,changed,score,url,uid,name',
    'rows' => variable_get('apachesolr_rows', 10),
    'facet' => 'true',
    'facet.mincount' => 1,
    'facet.sort' => 'true',
    'facet.field' => array(
      'imfield_vid_'. _project_get_vid(),
    ),
    'facet.limit' => 200,
    'qt' => 'standard',
  );

 $sort = isset($_GET['solrsort']) ? check_plain($_GET['solrsort']) : '';

  // Validate sort parameter
  if (isset($sort) && preg_match('/^([a-z0-9_]+ (asc|desc)(,)?)+$/i', $sort)) {
    $params['sort'] = $sort;
  }

  $page = isset($_GET['page']) ? $_GET['page'] : 0;
  $params['start'] = $page * $params['rows'];
  // This is the object that does the communication with the solr server.
  $solr = apachesolr_get_solr();

  // This hook allows modules to modify the query and params objects.
  apachesolr_modify_query($query, $params, 'apachesolr_search');
  if (!$query) {
    return array();
  }

  $response = $solr->search($query->get_query_basic(), $params['start'], $params['rows'], $params);
  // The response is cached so that it is accessible to the blocks and anything
  // else that needs it beyond the initial search.
  $total = $response->response->numFound;

  project_solr_response_cache(array($query, $response, $parent_term));

  // Set breadcrumb
  $breadcrumb = menu_get_active_breadcrumb();
  drupal_set_breadcrumb($breadcrumb);

  pager_query("SELECT %d", $params['rows'], 0, NULL, $total);
  $output = "";
  if ($total > 0) {
    foreach ($response->response->docs as $doc) {
      $doc->created = strtotime($doc->created);
      $doc->changed = strtotime($doc->changed);
      $output .= project_solr_render_search_result($doc);
    }
  }
  else {
    $output .= t('No project found in this category.');
  }
  return $output;
}

function project_solr_response_cache($set = FALSE) {
  static $cache = NULL;
  if ($set !== FALSE) {
    $cache = $set;
  }
  return $cache;
}

//----------------------------------------
// Blocks
//----------------------------------------

/**
 * Implementation of hook_block().
 */
function project_solr_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    return array(
      'project_solr_categories' => array(
        'info' => t('Project: categories'),
        'cache' => BLOCK_CACHE_PER_PAGE,
      ),
      'project_solr_order' => array(
        'info' => t('Project: ordering'),
        'cache' => BLOCK_CACHE_PER_PAGE,
      ),
    );
  }

  if ($op == 'view' && ($search = project_solr_response_cache())) {
    list($query, $response, $parent_term) = $search;

    if ($delta == 'project_solr_categories') {
      $facet = 'imfield_vid_'.  _project_get_vid();
      $terms = array();

      // Get the terms at the current depth.
      $current_tid = $parent_term->tid;
      foreach ($query->get_fields() as $field) {
        if ($field['#name'] == 'tid') {
          $current_tid = $field['#value'];
          break;
        }
      }
      $current_level_terms = array();
      $tree = taxonomy_get_tree(_project_get_vid(), $current_tid, -1, 1);
      foreach ($tree as $term) {
        $current_level_terms[$term->tid] = $term;
      }

      foreach ($response->facet_counts->facet_fields->$facet as $tid => $count) {
        $active = $query->has_field('tid', $tid);
        if (!isset($current_level_terms[$tid]) && (!$active || $tid != $current_tid)) {
          continue;
        }
        $unclick_link = '';
        $term = taxonomy_get_term($tid);
        $new_query = clone $query;
        $new_query->remove_field('type', 'project_project');

        if ($active) {
          $contains_active = TRUE;
          $new_query->remove_field('tid', $term->tid);
          $path = 'project/' . drupal_strtolower($parent_term->name);
          $querystring = $new_query->get_url_querystring();
          $unclick_link = theme('apachesolr_unclick_link', $path, $querystring);
        }
        else {
          $new_query->add_field('tid', $term->tid);
          $path = 'project/' . drupal_strtolower($parent_term->name);
          $querystring = $new_query->get_url_querystring();
        }
        $countsort = $count == 0 ? '' : 1 / $count;
        // if numdocs == 1 and !active, don't add.
        if ($response->numFound == 1 && !$active) {
          // skip
        }
        else {
          $terms[$active ? $countsort . $term->name : 1 + $countsort . $term->name] = theme('apachesolr_facet_item', $term->name, $count, $path, $querystring, $active, $unclick_link, $response->numFound);
        }
      }
      $vocab = taxonomy_vocabulary_load(_project_get_vid());

      ksort($terms);
      return array(
        'subject' => $vocab->name,
        'content' => theme('apachesolr_facet_list', $terms, 200),
      );
      return;
    }
  }
}

//----------------------------------------
// Theme-related functions
//----------------------------------------

/**
 * Perform the business logic to 
 */
function project_solr_render_search_result($result) {
  $download_table = '';
  if (module_exists('project_release') && !empty($result->isfield_project_has_releases)) {
    $download_table = project_release_table($result, 'recommended', 'all', t('Version'), FALSE, FALSE);
  }
  // TODO
  $project_terms = '';
  return theme('project_solr_result', $result, $project_terms, $download_table);
}

/**
 * Return the themeable output to display for Solr project search results.
 *
 * @param $project
 *   Pseudo-node object returned by ApacheSolr search query.
 * @param $project_terms
 *   HTML for the project taxonomy terms for this project.
 * @param $download_table
 *   
 *
 * @return
 *   Themed HTML output for the search result.
 */
function theme_project_solr_result($project, $project_terms = '', $download_table = '') {
  $output = '';
  $output .= '<div class="project-solr-teaser">';
  $output .= '<div class="project-changed">'. format_date($project->changed) .'</div>';
  $output .= '<div class="project-teaser">'. $project->body .'</div>';
  if (!empty($download_table)) {
    $output .= '<div class="project-download-table">'. $download_table .'</div>';
  }
  if (!empty($project_terms)) {
    $output .= '<div class="project-terms">'. $project->terms .'</div>';
  }
  $output .= '</div>';
  return $output;
}

